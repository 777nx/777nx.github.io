<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fantasy的技术小站</title>
  
  
  <link href="https://www.777nx.cn/atom.xml" rel="self"/>
  
  <link href="https://www.777nx.cn/"/>
  <updated>2023-05-15T13:41:28.985Z</updated>
  <id>https://www.777nx.cn/</id>
  
  <author>
    <name>Fantasy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数维杯数学建模挑战赛C题</title>
    <link href="https://www.777nx.cn/posts/b13bf0e.html"/>
    <id>https://www.777nx.cn/posts/b13bf0e.html</id>
    <published>2023-05-12T23:49:12.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="233a3281fcfa1f4dc11c18fab3c7a990304e3859e4985eb55ef462a20a5c6929"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">宫内节育器的生产具体建模过程以及思路</summary>
    
    
    
    <category term="Python" scheme="https://www.777nx.cn/categories/Python/"/>
    
    
    <category term="数学建模" scheme="https://www.777nx.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="数维杯" scheme="https://www.777nx.cn/tags/%E6%95%B0%E7%BB%B4%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue3组件之间的数据共享</title>
    <link href="https://www.777nx.cn/posts/f8f8cbb6.html"/>
    <id>https://www.777nx.cn/posts/f8f8cbb6.html</id>
    <published>2023-05-09T21:48:35.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-组件之间的关系">1. 组件之间的关系</h2><p>在项目开发中，组件之间的关系分为如下3种：</p><ol><li>父子关系</li><li>兄弟关系</li><li>后代关系</li></ol><p><img src="https://img.777nx.cn/test/image-20230509215311561.png" alt=""></p><h2 id="2-父子组件之间的数据共享">2. 父子组件之间的数据共享</h2><p>父子组件之间的数据共享又分为：</p><ol><li><code>父 -&gt; 子</code>共享数据</li><li><code>子 -&gt; 父</code>共享数据</li><li><code>父 &lt;-&gt; 子</code>双向数据同步</li></ol><h3 id="2-1-父组件向子组件共享数据">2.1 父组件向子组件共享数据</h3><p>父组件通过<code>v-bind属性绑定</code>向子组件共享数据。同时，子组件需要使用<code>props</code>接收数据。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509215706903.png" alt="image-20230509215706903"></p><h3 id="2-2-子组件向父组件共享数据">2.2 子组件向父组件共享数据</h3><p>子组件通过<code>自定义事件</code>的方式向父组件共享数据。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509215742232.png" alt="image-20230509215742232"></p><h3 id="2-3-父子组件之间数据的双向同步">2.3 父子组件之间数据的双向同步</h3><p>父组件在使用子组件期间，可以使用<code>v-model指令</code>维护组件内外数据的双向同步：</p><p><img src="https://img.777nx.cn/test/image-20230509215830222.png" alt="image-20230509215830222"></p><h2 id="3-兄弟组件之间的数据共享">3. 兄弟组件之间的数据共享</h2><p><code>兄弟组件之间</code>实现数据共享的方案是<code>EventBus</code>。可以借助于第三方的包<code>mitt</code>来创建 <code>eventBus对象</code>，从而实现兄弟组件之间的数据共享。示意图如下：</p><p><img src="https://img.777nx.cn/test/image-20230509215948200.png" alt="image-20230509215948200"></p><h3 id="3-1-安装-mitt-依赖包">3.1 安装 mitt 依赖包</h3><p>在项目中运行如下的命令，安装mitt依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mitt@2.1.0</span><br></pre></td></tr></table></figure><h3 id="3-2-创建公共的EventBus模块">3.2 创建公共的EventBus模块</h3><p>在项目中创建公共的<code>eventBus模块</code>如下：</p><p><img src="https://img.777nx.cn/test/image-20230509220134562.png" alt="image-20230509220134562"></p><h3 id="3-3-在数据接收方自定义事件">3.3 在<code>数据接收方</code>自定义事件</h3><p>在数据接收方，调用<code>bus.on</code>(‘事件名称’, 事件处理函数)方法<code>注册一个自定义事件</code>。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509220251394.png" alt="image-20230509220251394"></p><h3 id="3-4-在数据接发送方触发事件">3.4 在<code>数据接发送方</code>触发事件</h3><p>在数据发送方，调用<code>bus.emit</code>(‘事件名称’, 要发送的数据)方法<code>触发自定义事件</code>。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509220330547.png" alt="image-20230509220330547"></p><h2 id="4-后代关系组件之间的数据共享">4. 后代关系组件之间的数据共享</h2><p>后代关系组件之间共享数据，指的是<code>父节点的组件</code>向其<code>子孙组件</code>共享数据。此时组件之间的嵌套关系比较复杂，可以使用<code>provide</code>和<code>inject</code>实现后代关系组件之间的数据共享。</p><p><img src="https://img.777nx.cn/test/image-20230509220415962.png" alt="image-20230509220415962"></p><h3 id="4-1-父节点通过provide共享数据">4.1 父节点通过<code>provide</code>共享数据</h3><p>父节点的组件可以通过<code>provide方法</code>，对其<code>子孙组件</code>共享数据：</p><p><img src="https://img.777nx.cn/test/image-20230509221324505.png" alt="image-20230509221324505"></p><h3 id="4-2-子孙节点通过inject接收数据">4.2 子孙节点通过<code>inject</code>接收数据</h3><p>子孙节点可以使用<code>inject</code>数组，接收父级节点<code>向下共享的数据</code>。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509221413094.png" alt="image-20230509221413094"></p><h3 id="4-3-父节点对外共享响应式的数据">4.3 父节点对外共享<code>响应式的数据</code></h3><p>父节点使用provide向下共享数据时，可以结合<code>computed函数</code>向下共享<code>响应式的数据</code>。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509221523077.png" alt="image-20230509221523077"></p><h3 id="4-4-子孙节点使用响应式的数据">4.4 子孙节点<code>使用</code>响应式的数据</h3><p>如果父级节点共享的是<code>响应式的数据</code>，则子孙节点必须以<code>.value</code>的形式进行使用。示例代码如下：</p><p><img src="https://img.777nx.cn/test/image-20230509221603596.png" alt="image-20230509221603596"></p><h2 id="5-vuex">5. vuex</h2><p>vuex是<code>终极的</code>组件之间的数据共享方案。在企业级的vue项目开发中，vuex可以让组件之间的数据共享变得<code>高效</code>、<code>清晰</code>、且<code>易于维护</code>。</p><p><img src="https://img.777nx.cn/test/image-20230509221832242.png" alt="image-20230509221832242"></p><h2 id="6-总结">6. 总结</h2><ul><li><p>父子关系</p><ol><li>父 -&gt; 子 <code>属性绑定</code></li><li>子 -&gt; 父 <code>事件绑定</code></li><li>父 &lt;-&gt; 子 <code>组件上的v-model</code></li></ol></li><li><p>兄弟关系<br>4. <code>EventBus</code></p></li><li><p>后代关系<br>5. <code>provide</code>&amp;<code>inject</code></p></li><li><p>全局数据共享<br>6. <code>vuex</code></p></li></ul>]]></content>
    
    
    <summary type="html">Vue3组件之间的数据共享</summary>
    
    
    
    <category term="前端" scheme="https://www.777nx.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://www.777nx.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MySQL命令</title>
    <link href="https://www.777nx.cn/posts/1069a098.html"/>
    <id>https://www.777nx.cn/posts/1069a098.html</id>
    <published>2023-05-08T23:46:03.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>开发者必备Mysql常用命令，涵盖了数据定义语句、数据操纵语句及数据控制语句，基于Mysql5.7。</p><h2 id="数据定义语句-DDL">数据定义语句(DDL)</h2><h3 id="数据库操作">数据库操作</h3><ul><li>登录数据库：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure><ul><li>创建数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test</span><br></pre></td></tr></table></figure><ul><li>查看所有数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_41.f37d4d3a.png" alt="img"></p><ul><li>选择数据库并使用：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br></pre></td></tr></table></figure><ul><li>查看所有数据表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables</span><br></pre></td></tr></table></figure><ul><li>删除数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database test</span><br></pre></td></tr></table></figure><h3 id="表操作">表操作</h3><ul><li>创建表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(ename <span class="type">varchar</span>(<span class="number">10</span>),hiredate <span class="type">date</span>,sal <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),deptno <span class="type">int</span>(<span class="number">2</span>))  </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(deptno <span class="type">int</span>(<span class="number">2</span>),deptname <span class="type">varchar</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_42.940b3b71.png" alt="img"></p><ul><li>查看表的定义：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> emp</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_43.1ede5291.png" alt="img"></p><ul><li>查看表定义（详细）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp \G</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_44.79ca2830.png" alt="img"></p><ul><li>删除表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp</span><br></pre></td></tr></table></figure><ul><li>修改表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp modify ename <span class="type">varchar</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li>添加表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">column</span> age <span class="type">int</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>删除表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">column</span> age</span><br></pre></td></tr></table></figure><ul><li>字段改名；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp change age age1 <span class="type">int</span>(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li>修改表名：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp rename emp1</span><br></pre></td></tr></table></figure><h2 id="数据操纵语句-DML">数据操纵语句(DML)</h2><h3 id="插入记录">插入记录</h3><ul><li>指定名称插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (ename,hiredate,sal,deptno) <span class="keyword">values</span> (<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;2018-01-01&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>不指定名称插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;2018-01-01&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>批量插入数据：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;dept1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;dept2&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="修改记录">修改记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal<span class="operator">=</span><span class="string">&#x27;4000&#x27;</span>,deptno<span class="operator">=</span><span class="number">2</span> <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除记录">删除记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查询记录">查询记录</h3><ul><li>查询所有记录：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><ul><li>查询不重复的记录：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><ul><li>条件查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sal<span class="operator">&lt;</span><span class="number">3000</span></span><br></pre></td></tr></table></figure><ul><li>排序和限制：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span> limit <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>分页查询(查询从第0条记录开始10条)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>聚合(查询部门人数大于1的部门编号)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>连接查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno<span class="operator">=</span>d.deptno</span><br></pre></td></tr></table></figure><ul><li>子查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept)</span><br></pre></td></tr></table></figure><ul><li>记录联合：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp <span class="keyword">union</span> <span class="keyword">select</span> deptno <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure><h2 id="数据控制语句-DCL">数据控制语句(DCL)</h2><h3 id="权限相关">权限相关</h3><ul><li>授予操作权限(将test数据库中所有表的select和insert权限授予test用户)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">on</span> test.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查看账号权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_45.072633db.png" alt="img"></p><ul><li>收回操作权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> test.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_46.9c6f36a5.png" alt="img"></p><ul><li>授予所有数据库的所有权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>授予所有数据库的所有权限(包括grant)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option</span><br></pre></td></tr></table></figure><ul><li>授予SUPER PROCESS FILE权限（系统权限不能指定数据库）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> super,process,file <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>只授予登录权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> usage <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="账号相关">账号相关</h3><ul><li>删除账号：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>修改自己的密码：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>管理员修改他人密码：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="其他">其他</h2><h3 id="字符集相关">字符集相关</h3><ul><li>查看字符集：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_47.495dee0a.png" alt="img"></p><ul><li>创建数据库时指定字符集：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test2 <span class="type">character</span> <span class="keyword">set</span> utf8</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_48.a08408d7.png" alt="img"></p><h3 id="时区相关">时区相关</h3><ul><li>查看当前时区（UTC为世界统一时间，中国为UTC+8）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%time_zone%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_49.3441424e.png" alt="img"></p><ul><li>修改mysql全局时区为北京时间，即我们所在的东8区：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改当前会话时区：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+8:00&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/refer_screen_50.f4888b63.png" alt="img"></p><ul><li>立即生效：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges</span><br></pre></td></tr></table></figure><h2 id="最后">最后</h2>]]></content>
    
    
    <summary type="html">开发者必备MySQL命令</summary>
    
    
    
    <category term="Java" scheme="https://www.777nx.cn/categories/Java/"/>
    
    
    <category term="MySQL" scheme="https://www.777nx.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>我的图床解决方案</title>
    <link href="https://www.777nx.cn/posts/ab6c83fc.html"/>
    <id>https://www.777nx.cn/posts/ab6c83fc.html</id>
    <published>2023-05-05T00:42:24.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言">一、前言</h2><p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p><p>图床的选择有很多，<a href="https://www.777nx.cn/posts/d7fb1ba1.html">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：Github图床，NPM。</p><h2 id="二、基于GitHub仓库的图床">二、基于GitHub仓库的图床</h2><h3 id="2-1-建立Github仓库">2.1 建立Github仓库</h3><ol><li>进入<a href="https://github.com/">Github官网</a>注册并登录自己的账号，到自己的个人主页，点击右上角的<code>+</code>，并选择<code>New Repository</code>创建自己的仓库。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505005100794.png" alt="image-20230505005100794"></p><ol start="2"><li>仓库名字随意，描述也可以自由发挥，可见性最好选<code>public</code>，<code>Readme</code>文件可以创建，然后点击<code>Create Repository</code>创建仓库。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505005223253.png" alt="image-20230505005223253"></p><ol start="3"><li>让你的计算机与Github建立通信，这部分可以参考<a href="https://www.777nx.cn/posts/e593433d.html">Hexo 博客搭建基础教程 (一)</a>的第7点，主要是<code>创建公钥</code>、<code>上传公钥</code>、<code>检查通信</code>这几步，确保计算机有权限访问远程仓库，所述教程是用的<code>RSA公钥</code>。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505005657526.png" alt="image-20230505005657526"></p><ol start="4"><li>先在本地创建一个文件夹，文件夹位置和名字随意就可以，进入该文件夹后右键打开<code>Git Bash</code>，然后输入以下代码把之前创建的仓库拷贝下来，其中<code>git clone</code>后面的东西要替换成自己的仓库信息，可以通过自己仓库的ssh链接来获取。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:777nx/fantasy-static.git</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/image-20230505005954445.png" alt="image-20230505005954445"></p><p><img src="https://img.777nx.cn/test/image-20230505010026723.png" alt="image-20230505010026723"></p><p>看到上图的信息就代表成功把整个仓库拷贝到当前文件夹了，此时我们可以看见自己的文件夹多了个<code>.git</code>文件夹和<code>Readme.md</code>文件，这就代表成功了。</p><p><img src="https://img.777nx.cn/test/image-20230505010119305.png" alt="image-20230505010119305"></p><blockquote><p>注意：<code>.git</code>是隐藏文件夹</p></blockquote><ol start="5"><li>此时我们最好在这个文件夹里面创建创建一个<code>img</code>文件夹专门存放图片，如果有存放其他类型资源的可以创建别的文件夹，比如现在想往仓库里加两张图，直接就把图片复制到<code>img</code>文件夹里面即可。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505010504436.png" alt="image-20230505010504436"></p><p>然后在带有<code>Readme.md</code>文件的那个文件夹内，右键打开<code>Git Bash</code>（注意看清楚是什么文件夹），然后依次输入以下命令把更改推送到远程仓库，最后一步不成功可能要多试几次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>最后看见如下信息就代表推送成功了</p><p><img src="https://img.777nx.cn/test/image-20230505010652292.png" alt="image-20230505010652292"></p><p>仓库此时应该也有了刚刚上传的资源了</p><p><img src="https://img.777nx.cn/test/image-20230505010811285.png" alt="image-20230505010811285"></p><p>下次增删图片或者其他东西，就这样照猫画虎就可以推上来更新仓库！</p><h3 id="2-2-Staticaly-CDN加速">2.2 Staticaly CDN加速</h3><p>直接访问Github仓库的资源是非常慢的！因此我们要用一些免费的CDN进行加速，<code>Staticaly CDN</code>是目前免费CDN中比较好用的啦，他的应用规则如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 其中 user是用户名  repo是仓库名  version代表版本(tag或者分支 默认为main)  flie是文件路径 </span></span><br><span class="line">https:<span class="regexp">//</span>cdn.staticaly.com<span class="regexp">/gh/u</span>ser<span class="regexp">/repo@version/</span>file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我的示例仓库就是加速地址就是这个大家可以参考参考</span></span><br><span class="line">https:<span class="regexp">//</span>cdn.staticaly.com<span class="regexp">/gh/</span><span class="number">777</span>nx<span class="regexp">/fantasy-static@main/img</span><span class="regexp">/wallhaven-72x31v.png</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Vercel部署">2.3 Vercel部署</h3><div class="note info modern"><p>此方法加载速度较快，但是需要域名自定义绑定，其优点也是可以绑定自定义域了，目前Vercel每个月限制流量100GB</p></div><ol><li>进入<a href="https://vercel.com/dashboard">Vercel控制面板</a>新建项目，并<code>通过Github继续</code>，选择导入刚刚创建的仓库，然后直接部署即可</li></ol><p><img src="https://img.777nx.cn/test/image-20230505011341235.png" alt="image-20230505011341235"></p><p><img src="https://img.777nx.cn/test/image-20230505011429195.png" alt="image-20230505011429195"></p><ol start="2"><li>进入该项目控制台后，选择右上角的<code>View Domains</code>添加新的域名，添加一个自己域名的二级域名，然后在你对应的域名解析控制台添加对应解析，等待生效。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505011617606.png" alt="image-20230505011617606"></p><p><img src="https://img.777nx.cn/test/image-20230505012224095.png" alt="image-20230505012224095"></p><p><img src="https://img.777nx.cn/test/image-20230505011846533.png" alt="image-20230505011846533"></p><ol start="3"><li><p>通过<code>自定义域名+资源路径</code>即可访问到对应的资源，例如我这里为<code>https://fantasy-static.777nx.cn/img/wallhaven-72x31v.png</code></p></li><li><p>要更新图片怎么办？只要将资源复制到对应的文件夹，然后再执行一次下面的命令即可：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;更新图片&quot;</span></span><br><span class="line"><span class="comment"># 推送至github仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这个命令默认是更新到仓库的<code>main</code>分支上，Vercel一旦检测到main分支发送变化就会触发新一轮部署，我们稍候片刻即可通过新的路径访问到新的资源。</p><h3 id="2-4-Cloudflare部署">2.4 Cloudflare部署</h3><div class="note info modern"><p>此方法速度比Vercel稍慢，但是可以不需要域名，目前我就在用这个，而且CloudFlare对于普通用户来说几乎不限量了</p></div><ol><li>进入<a href="https://www.cloudflare.com/">Cloudflare官网</a>注册并登录自己的账号，然后进入控制台后选择左边的<code>Pages</code>，再创建一个新项目并通过Git进行连接，所有参数默认直接部署。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505012614707.png" alt="image-20230505012614707"></p><p><img src="https://img.777nx.cn/test/image-20230505012721012.png" alt="image-20230505012721012"></p><ol start="2"><li>通过给出的<code>初始域名+资源路径</code>即可访问到的对应资源，例如我这个就是<code>fantasy-static.pages.dev/img/wallhaven-72x31v.png</code>，当然你也可以绑定自定义域名使用。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505012852757.png" alt="image-20230505012852757"></p><h2 id="三、npm图床">三、npm图床</h2><h3 id="3-1-npm发布包">3.1 npm发布包</h3><ol><li>首先需要注册一个npm的账号。访问<a href="https://www.npmjs.com/signup/">npm注册页面</a></li></ol><p><img src="https://img.777nx.cn/test/image-20230505013352088.png" alt="image-20230505013352088"></p><ol start="2"><li>完成邮箱验证，注册完成后进入账号管理界面:头像-&gt;Account，拉倒最上方，你会看到<code>You have not verified your email address</code>字样的提示，点击以后按提示步骤验证你的邮箱。</li></ol><p><img src="https://img.777nx.cn/test/02.png" alt="img"></p><ol start="3"><li>找到我们之前创建的图床仓库，在本地合适的位置把它<code>clone</code>下来。找个空文件夹打开终端输入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure><p>例如我的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:777nx/fantasy-static.git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/777nx/fantasy-static.git</span><br></pre></td></tr></table></figure><ol start="4"><li>在clone下来的[AssetsRepo]文件夹内(例如我的是fantasy-static文件夹内)打开终端，输入以下指令切换回原生源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><ol start="5"><li>添加本地npm用户设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><ol start="6"><li>运行npm初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在npm官网搜索相应包名，搜不到就说明还没被占用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/image-20230505014742021.png" alt="image-20230505014742021"></p><p>最后会输出一段package.json，请求确认，输入yes即可。</p><ol start="7"><li>然后输入发布指令，我们就可以把包发布到npm上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><ol start="8"><li>jsdelivr+npm 的图片引用和 jsdelivr+github 很相似，例如我在<code>[AssetsRepo]</code>仓库里存放的<code>/img/wallhaven-72x31v.png</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/wallhaven-72x31v.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/[NpmPackageName]/img/wallhaven-72x31v.png</span><br></pre></td></tr></table></figure><blockquote><p>可以看到Npm只需要提供包名即可。这也是一开始要求包名不重复的原因之一</p></blockquote><p>jsDelivr+Npm依然有100MB的包大小限制，但是NPM有丰富的国内节点。可以挑选一个使用。个人推荐知乎的。没有大小限制，而且也很稳定。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>:package@:version/:file</span><br><span class="line">【unpkg 自建】</span><br><span class="line">https:<span class="regexp">//</span>cdn.cbd.int<span class="regexp">/:package@:version/</span>:file</span><br></pre></td></tr></table></figure><p>当然你也可以利用<a href="https://unpkg.com/">unpkg</a>自建。(UNPKG 是一个内容源自 npm 的全球快速 CDN。它部署在 cloudflare 上，在大陆地区访问到的是香港节点。所以速度也不错。)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/unpkg.com/</span><span class="symbol">:package</span>@<span class="symbol">:version/</span><span class="symbol">:file</span></span><br></pre></td></tr></table></figure><h3 id="3-2-图片转换与发布">3.2 图片转换与发布</h3><p>如果每次都要在本地进行<code>npm publish</code>的话，npm的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给github action来完成。</p><ol><li>在<a href="https://www.npmjs.com/">npm官网</a>-&gt;头像-&gt;Access Tokens-&gt;Generate New Token,勾选Automation 选项，<code>Token</code>只会显示这一次，之后如果忘记了就只能重新生成重新配置了。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505015328425.png" alt="image-20230505015328425"></p><p><img src="https://img.777nx.cn/test/image-20230505015408100.png" alt="image-20230505015408100"></p><ol start="2"><li>在github的[AssetsRepo]仓库设置项里添加一个名为<code>NPM_TOKEN</code>的<code>secrets</code>，把获取的Npm的Access token输入进去。</li></ol><p><img src="https://img.777nx.cn/test/image-20230505015618726.png" alt="image-20230505015618726"></p><ol start="3"><li>在本地的<code>[AssetsRepo]</code>文件夹下新建<code>[AssetsRepo]/.github/workflows/autopublish.yml</code></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"><span class="comment"># 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在本地的<code>[AssetsRepo]</code>文件夹下打开终端，运行以下指令，上传新增内容至 github，即可触发部署。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>此处的四行指令顺序严格。<br>每次更新 npm 图床都需要先修改<code>[AssetsRepo]\package.json</code>里的<code>version</code>,也就是版本号。<br>而<code>npm version patch</code>即为更新 package.json 里的版本号的指令，效果是末尾版本号+1，例如<code>0.0.1=&gt;0.0.2</code>、<code>1.1.3=&gt;1.1.4</code>。免去了打开<code>package.json</code>再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新 npm 图床务必要记得更新<code>package.json</code>里的版本号！</p></div><h2 id="四、参考教程">四、参考教程</h2><ol><li><p><a href="https://www.fomal.cc/posts/d7fb1ba1.html">免费图床综合教程</a></p></li><li><p><a href="https://anzhiy.cn/posts/72ea.html">npm图床使用</a></p></li></ol><h2 id="五、最后">五、最后</h2><ol><li><p>GitHub图床仓库大小不能超过1G。当仓库超过1G后会有人工审核仓库内容，如果发现用来做图床，轻则删库重则封号。</p></li><li><p>Npm有<code>100MB</code>的包大小限制，但是NPM有丰富的国内节点。</p></li></ol>]]></content>
    
    
    <summary type="html">构建免费图床</summary>
    
    
    
    <category term="博客" scheme="https://www.777nx.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="图床" scheme="https://www.777nx.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>全网最详细的重装系统教程</title>
    <link href="https://www.777nx.cn/posts/4aa3a157.html"/>
    <id>https://www.777nx.cn/posts/4aa3a157.html</id>
    <published>2023-04-26T23:54:49.000Z</published>
    <updated>2023-05-15T13:41:28.989Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>以下文章来源于BOOM哥，作者BOOM哥</p></div><div class="note info flat"><p>参考：<a href="https://mp.weixin.qq.com/s/QnQuGfU-1uhOq5nr-cxOKA">全网最详细的重装系统教程</a></p></div><h2 id="一、前言">一、前言</h2><p>相信大家都听说过重装系统。重装系统是在电脑系统出现问题或受到恶意软件、流氓软件的“污染”时可以让电脑满血复活的一种电脑抢救措施。很多小伙伴看到“重装系统”两个字就觉得重装系统非常难。</p><p>其实并不是，重装系统真的不难，这是有点麻烦。学会重装系统后，我们可以在紧急情况下抢救我们的电脑，让它瞬间满血复活。所以非常建议每一位小伙伴学一学怎么重装系统。今天的重装系统教程写的比较详细，希望它能在紧急情况下给大家提供一些帮助。</p><p><img src="https://img.777nx.cn/test/image-20230426235739979.png" alt="image-20230426235739979"></p><p>今天就教大家怎么使用“微PE工具箱”给电脑重装<strong>纯净</strong>的Windows11系统吧。</p><blockquote><p>**注意：**其他Windows系统的重装方法也跟Windows11的重装方法一模一样。</p></blockquote><p>先给大家介绍一下微PE工具箱。它是一个非常不错的PE系统U盘制作工具，免费且无广告，安全可靠，也是我最喜欢的一个PE系统U盘制作工具。因为在不久前有好多老牌PE系统U盘制作工具（如装机大师、大白菜等等）被曝给用户电脑偷偷安装流氓软件，所以在这里不建议大家使用其他PE系统U盘制作软件。</p><h2 id="二、准备工作">二、准备工作</h2><ol><li>准备一个8GB以上的<strong>空</strong>U盘（在PE系统U盘制作过程中，U盘会被格式化）</li><li>准备一台可以正常上网使用的电脑</li></ol><h2 id="三、下载-安装-微PE工具箱">三、下载&amp;安装&quot;微PE工具箱&quot;</h2><ol><li>用电脑打开微PE工具箱官网，官网链接在这里：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.wepe.com.cn/download.html?tdsourcetag=s_pcqq_aiomsg</span><br></pre></td></tr></table></figure><ol start="2"><li>点击【查看下载地址列表】：</li></ol><p><img src="https://img.777nx.cn/test/680.png" alt="图片"></p><ol start="3"><li>点击【我已捐赠，继续查看下载地址】</li></ol><p>当然，在这里大家也可以选择支持一下微PE工具箱团队，因为这个软件真的非常好用。</p><p><img src="https://img.777nx.cn/test/660.png" alt="660"></p><ol start="4"><li>下载最新版微PE工具箱的64位版本：</li></ol><p><img src="https://img.777nx.cn/test/661.png" alt="661"></p><ol start="5"><li><strong>将准备好的空U盘插入到电脑中：</strong></li></ol><p><img src="https://img.777nx.cn/test/662.png" alt="662"></p><ol start="6"><li>解压下载好的微PE工具箱压缩包并打开，双击运行其中的exe文件：</li></ol><p><img src="https://img.777nx.cn/test/663.png" alt="663"></p><ol start="7"><li>点击【其他安装方式】右侧的<strong>U盘图标</strong>，即选择【安装PE到U盘】：</li></ol><p><img src="https://img.777nx.cn/test/664.png" alt="664"></p><ol start="8"><li>选好自己刚刚插入的U盘后，点击【立即安装进U盘】，其他地方不用改：</li></ol><p><img src="https://img.777nx.cn/test/665.png" alt="665"></p><ol start="9"><li>点击【开始制作】：</li></ol><p><img src="https://img.777nx.cn/test/666.png" alt="666"></p><ol start="10"><li>点击【完成安装】：</li></ol><p><img src="https://img.777nx.cn/test/667.png" alt="667"></p><ol start="11"><li>就这样，PE系统U盘制作完成了。打开此电脑可以发现U盘被分成了两个分区，一个分区容量较大，这个分区可以正常存放文件。另一个分区名字叫【EFI】，这个分区非常重要，不能给里面存储其他文件，<strong>里面的文件也不能动！！</strong></li></ol><p><img src="https://img.777nx.cn/test/668.png" alt="668"></p><h2 id="四、下载系统ISO文件，并拷贝到PE系统U盘">四、下载系统ISO文件，并拷贝到PE系统U盘</h2><p>接下来，我们要从MSDN上下载纯净的Windows11操作系统ISO文件（镜像文件），并将它拷贝到PE系统U盘的那个容量较大，可以正常存放文件的分区中。</p><p>MSDN提供的系统资源都来自微软，MSDN可以理解为微软在中国的资源下载网站，大家可以放心使用里面的系统资源。</p><ol><li>用电脑打开以下链接进入MSDN：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//m</span>sdn.itellyou.cn/</span><br></pre></td></tr></table></figure><ol start="2"><li>点击【Windows11】：</li></ol><p><img src="https://img.777nx.cn/test/image-20230427001136575.png" alt="image-20230427001136575"></p><ol start="3"><li>输入自己的账号进行登录。如果没有注册过账号，可以注册一下：</li></ol><p><img src="https://img.777nx.cn/test/image-20230427001156665.png" alt="image-20230427001156665"></p><ol start="4"><li>点击Windows11下方的【详细信息】：</li></ol><p><img src="https://img.777nx.cn/test/image-20230427001351234.png" alt="image-20230427001351234"></p><ol start="5"><li>用迅雷下载系统ISO文件：</li></ol><p><img src="https://img.777nx.cn/test/image-20230427001500155.png" alt="image-20230427001500155"></p><blockquote><p>**注意：**不知道business edition和consumer edition区别的小伙伴看这里</p></blockquote><p><img src="https://img.777nx.cn/test/641.png" alt="641"></p><ol start="6"><li>将下载好的系统ISO文件拷贝到PE系统U盘的容量大的分区中：</li></ol><p><img src="https://img.777nx.cn/test/642.png" alt="642"></p><p><strong>就这样，可以重装系统的PE系统U盘已经制作完成了。</strong></p><h2 id="五、重启故障电脑，重装系统">五、重启故障电脑，重装系统</h2><ol><li>接下来，将已经制作好的PE系统U盘插入到要重装系统的电脑中并重启它。当它重启出现开机画面时不停的按<strong>启动热键</strong>，出现选择菜单时选择自己的U盘，进入微PE。不知道自己电脑的启动热键的小伙伴看这里：</li></ol><p><img src="https://img.777nx.cn/test/643.png" alt="643"></p><p><img src="https://img.777nx.cn/test/644.png" alt="644"></p><ol start="2"><li>进入PE系统后，打开此电脑，打开PE系统U盘的有系统ISO的分区，鼠标右键点击此ISO文件，选择【装载】，再双击运行【Setup.exe】：</li></ol><p><img src="https://img.777nx.cn/test/645.png" alt="645"></p><p><img src="https://img.777nx.cn/test/646.png" alt="646"></p><p><img src="https://img.777nx.cn/test/647.png" alt="647"></p><ol start="3"><li>点击【现在安装】：</li></ol><p><img src="https://img.777nx.cn/test/648.png" alt="648"></p><ol start="4"><li>此时可能会出现密钥输入窗口。如果知道自己电脑原来的系统的密钥的话可以填进去。如果不知道的话就选【我没有产品密钥】，先安装系统，进入系统后再激活：</li></ol><p><img src="https://img.777nx.cn/test/649.png" alt="649"></p><ol start="5"><li>选择系统类型：</li></ol><p><img src="https://img.777nx.cn/test/650.png" alt="650"></p><ol start="6"><li>选择【自定义：仅安装Windows（高级）】：</li></ol><blockquote><p>**小提示：**这里也可以选【升级：安装Windows并保留文件、设置和应用程序】。如果你的电脑原来的系统没啥问题，你只是想升级一下系统的话可以选此选项。此选项不会格式化C盘。</p><p>如果你的电脑曾经中毒了或者被流氓软件“占领”了，那么我建议你选【自定义：仅安装Windows（高级）】，此选项会格式化C盘再安装系统，可以彻底杀死C盘中的病毒或流氓软件</p></blockquote><p><img src="https://img.777nx.cn/test/651.png" alt="651"></p><ol start="7"><li>选择自己电脑的C盘（按空间大小），并点击下一步</li></ol><p><img src="https://img.777nx.cn/test/652.png" alt="652"></p><ol start="8"><li>现在按提示操作就可以了，该避开的坑我已经说完了。</li></ol><p><strong>最后系统安装完成后会提示电脑将会在10秒内重启。此时等待电脑重启就可以了。当电脑重启进入黑屏状态时要立刻拔掉U盘！！！！！如果倒计时结束后电脑只是回到了PE系统，并没有自动重启的话，自己手动重启（PE系统左下角有重启/关机选项）就可以了。但无论是那种重启，在电脑黑屏时都必须要立刻拔掉U盘！！！</strong></p><ol start="9"><li><p>接下来电脑可能会重启好几次，这些都正常。这过程中不需要碰电脑，等待它正式进入系统设置页面就OK了。</p></li><li><p>进入桌面后不要忘了安装驱动程序，否则电脑会很卡。安装驱动时建议使用电脑官方提供的电脑管家。如果是组装机，那么可以从该主板品牌官网直接下载必要的驱动程序。个人不太建议使用驱动人生等乱七八糟的软件，因为这些软件也有很多流氓行为，一不小心就会给电脑安装流氓软件。</p></li></ol><p><img src="https://img.777nx.cn/test/670.png" alt="670"></p><ol start="11"><li>就这样，重装系统结束了。</li></ol><h2 id="六、最后">六、最后</h2><p>系统没有激活，系统的功能会被限制，比如你在桌面空白处点击右键，进入个性化设置，就会要求你进行激活，而WIN11激活需要秘钥。不懂激活，可以去我的公众号：<strong>Fantasy的技术小站</strong>，回复“激活”，也可以百度搜下激活。这样，所有的系统的相关事情就搞完了。</p>]]></content>
    
    
    <summary type="html">手把手教你重装系统</summary>
    
    
    
    <category term="计算机基础" scheme="https://www.777nx.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Windows" scheme="https://www.777nx.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>vscode镜像下载</title>
    <link href="https://www.777nx.cn/posts/b663c12a.html"/>
    <id>https://www.777nx.cn/posts/b663c12a.html</id>
    <published>2023-04-21T19:42:01.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>vscode官方网站下载速度太慢，非正规网站又不太敢下，通过镜像源下载就好了。</p><h2 id="教程">教程</h2><p>你们不介意版本的话，下面是1.78版本的链接（直接复制下载就好了）：<br><a href="https://vscode.cdn.azure.cn/stable/252e5463d60e63238250799aef7375787f68b4ee/VSCodeUserSetup-x64-1.78.0.exe">https://vscode.cdn.azure.cn/stable/252e5463d60e63238250799aef7375787f68b4ee/VSCodeUserSetup-x64-1.78.0.exe</a></p><ol><li>首先进入<a href="https://code.visualstudio.com/">vscode官方网站</a>，点击Download for Windows下载（最新版）。</li></ol><p><img src="https://img.777nx.cn/test/image-20230421194611880.png" alt="image-20230421194611880"></p><ol start="2"><li>然后进入到下载页面，点击链接，加载一会会，等到出现链接</li></ol><p><img src="https://img.777nx.cn/test/image-20230421194725264.png" alt="image-20230421194725264"></p><ol start="3"><li>直接在地址栏按下面方式修改就好啦。将地址中的/stable前的<code>az764295.vo.msecnd.net</code>换成<code>vscode.cdn.azure.cn</code>，再回车就会直接在下载列表啦。</li></ol><p><img src="https://img.777nx.cn/test/image-20230421195057696.png" alt="image-20230421195057696"></p><h2 id="最后">最后</h2><p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=9m0hq0k625h2">https://cloud.tencent.com/developer/support-plan?invite_code=9m0hq0k625h2</a></p>]]></content>
    
    
    <summary type="html">vscode镜像下载</summary>
    
    
    
    <category term="前端" scheme="https://www.777nx.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vscode" scheme="https://www.777nx.cn/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>数学建模竞赛准备之python环境篇</title>
    <link href="https://www.777nx.cn/posts/4e7f4123.html"/>
    <id>https://www.777nx.cn/posts/4e7f4123.html</id>
    <published>2023-04-07T12:00:57.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言">一、前言</h2><p>最近正在准备数维杯，之前试过在电脑上安装 tensorflow，但一直都不成功。然后看了一眼 pip 管理工具下一堆包，乱得一批，所以干脆直接打算捡一些比较重点的包装上，比较鸡肋的就不要了。</p><h2 id="二、环境准备">二、环境准备</h2><h3 id="pip安装与使用">pip安装与使用</h3><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。</p><p>目前如果你在 <a href="https://www.python.org/">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p><blockquote><p><em>注意：Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</em></p></blockquote><p>pip 官网：<a href="https://pypi.org/project/pip/">https://pypi.org/project/pip/</a></p><p>你可以通过以下命令来判断是否已安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip --version     # Python2.x 版本命令</span><br><span class="line">pip3 --version    # Python3.x 版本命令</span><br></pre></td></tr></table></figure><h3 id="pip使用国内镜像源">pip使用国内镜像源</h3><p>默认情况下 pip 使用的是国外的镜像，在下载的时候速度非常慢，本文我们介绍使用国内清华大学的源，地址为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>我们可以直接在 pip 命令中使用 <strong>-i</strong> 参数来指定镜像地址，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install numpy -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>以上命令使用清华镜像源安装 numpy 包。</p><p>这种只对当前安装对命令有用，如果需要全局修改，则需要修改配置文件。</p><p>Linux/Mac os 环境中，配置文件位置在 ~/.pip/pip.conf（如果不存在创建该目录和文件）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.pip</span><br></pre></td></tr></table></figure><p>打开配置文件 <code>~/.pip/pip.conf</code>，修改如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">index</span>-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line"><span class="keyword">trusted</span>-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p>查看 镜像地址：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 config list   </span><br><span class="line"><span class="keyword">global</span>.<span class="keyword">index</span>-url=<span class="string">&#x27;https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span></span><br><span class="line">install.<span class="keyword">trusted</span>-host=<span class="string">&#x27;https://pypi.tuna.tsinghua.edu.cn&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到已经成功修改了镜像。</p><p>Windows下，你需要在当前对用户目录下（C:\Users\xx\pip，xx 表示当前使用对用户，比如张三）创建一个 pip.ini在pip.ini文件中输入以下内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">index</span>-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line"><span class="keyword">trusted</span>-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><h3 id="升级pip包管理工具">升级pip包管理工具</h3><p>在命令行中输入下命令（如果是最新版本这一步可略）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="卸载pip下管理的所有包">卸载pip下管理的所有包</h3><p>首先在命令行输入下命令，目的是将 pip 下管理所有的包信息写到一个文本文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>再按照 所生成文本文件的信息将所有信息卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="批量下载自己所需的包">批量下载自己所需的包</h3><p>首先先要定义 requirements.txt 文件，里面的格式是一个包的名字一行，依次往下排。分享一下我的：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">numpy</span></span><br><span class="line"><span class="attribute">pandas</span></span><br><span class="line"><span class="attribute">pyecharts</span></span><br><span class="line"><span class="attribute">matplotlib</span></span><br><span class="line"><span class="attribute">seaborn</span></span><br><span class="line"><span class="attribute">keras</span></span><br><span class="line"><span class="attribute">tensorflow</span></span><br><span class="line"><span class="attribute">sklearn</span></span><br><span class="line"><span class="attribute">statsmodels</span></span><br><span class="line"><span class="attribute">scipy</span></span><br><span class="line"><span class="attribute">biopython</span></span><br></pre></td></tr></table></figure><p>再安装所有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="三、python包推荐及介绍">三、python包推荐及介绍</h2><ul><li><p>numpy</p><p>数据分析类，相当于 免费版的Matlab 矩阵功能以及其它一些少量的小算法。</p></li><li><p>pandas</p><p>数据分析类，非常完美的表格操作，非常适合洗数据。</p></li><li><p>pyecharts</p><p>数据可视化类，百度良心开源项目的echarts 的python 接口，功能非常强大，但缺点就是通常代码量会比较大，比较建议用来做地图（比 geopandas 安装方便一万倍）。</p></li><li><p>matplotlib</p><p>数据可视化类，非常经典的数据可视化工具，功能很全面，代码量比 pyecharts 少，但图效果通常相对简单。</p></li><li><p>seaborn</p><p>数据可视化类，基于 matplotlib 开发的可视化工具，它的特点是所有的零碎东西几乎都是设置成你想要的样子，而且做复杂图代码量相较 matplotlib 而言极少，且里面还包含了一些常用的算法最终一块可视化，亮点是甚至还能深度兼容 pandas 表格，强烈推荐！</p></li><li><p>tensorflow</p><p>神经网络类，Google 的开源神经网络构建工具，在计算机界应该是相当出名，构建自由度极强，但缺点就是代码量比较大（自由度高的代价）。</p></li><li><p>keras</p><p>神经网络类，基于 tensorflow 开发的神经网络构建工具，比 tensorflow 的代码量要少很多，对新手比较友好，竞赛期间比较推荐用这个包，省时间，代码量小。</p></li><li><p>sklearn</p><p>机器学习类，功能十分强大，代码量短小精悍。基本上除神经网络外其他所有机器学习算法（包括回归、聚类、降维）总之基本上 Matlab 直接支持的那些机器学习算法，甚至还有部分 Matlab 不直接支持的算法（例如 t-SNE、MDS 等）都能以 5 行以内的代码量实现。</p></li><li><p>scipy</p><p>数据科学、算法类，功能也是非常强大。包含特殊函数、统计学、微积分求解、拟合（基本所有拟合都能做）、线性规划、整数规划、数据结构算法等，甚至还可以做图片处理。</p></li></ul><h2 id="四、参考教程">四、参考教程</h2><ol><li><p><a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">Python pip 安装与使用</a></p></li><li><p><a href="https://www.runoob.com/w3cnote/pip-cn-mirror.html">pip 使用国内镜像源</a></p></li><li><p><a href="https://www.modb.pro/db/479910">数学建模竞赛准备之python环境篇</a></p></li></ol><h2 id="五、最后">五、最后</h2>]]></content>
    
    
    <summary type="html">数学建模竞赛准备之python环境篇</summary>
    
    
    
    <category term="Python" scheme="https://www.777nx.cn/categories/Python/"/>
    
    
    <category term="数学建模" scheme="https://www.777nx.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>如果时光可以倒流</title>
    <link href="https://www.777nx.cn/posts/f7be2b02.html"/>
    <id>https://www.777nx.cn/posts/f7be2b02.html</id>
    <published>2023-04-02T11:38:34.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h1>如果时光可以倒流</h1><p>如果真的有反方向的钟，我希望回到刚遇见你的时候，因为那个时候，我连你叫什么都不感兴趣。</p><p>一开始就知道我们注定无法在一起，但我却没能藏住心底的秘密。想到这里我的内心就开始隐隐作痛。</p><p>喜欢你和放下你，我都做不到。</p><p>比结束更痛苦的，就是拖泥带水的耗着。说爱吧，耗尽了所有希望，说不爱吧，又在某个瞬间发了疯的想。一边崩溃，一边自愈，反反复复，一边清醒，一边糊涂，一边说放下，一边又无可救药的想。</p>]]></content>
    
    
    <summary type="html">time-reverse</summary>
    
    
    
    <category term="生活趣闻" scheme="https://www.777nx.cn/categories/%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB/"/>
    
    
    <category term="时光" scheme="https://www.777nx.cn/tags/%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
  <entry>
    <title>eshop商城项目实训代码重构</title>
    <link href="https://www.777nx.cn/posts/f56b144a.html"/>
    <id>https://www.777nx.cn/posts/f56b144a.html</id>
    <published>2023-03-30T11:28:00.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><strong>eshop商城项目实训系列教程导航</strong></p><ol><li><a href="https://www.777nx.cn/posts/3bc4be07.html">eshop商城项目实训源码</a></li><li><a href="https://www.777nx.cn/posts/f56b144a.html">eshop商城项目实训代码重构</a> &lt;= 当前位置</li></ol></div><h2 id="基本架构">基本架构</h2><p>要先把基本框架搭建起来，才能够愉快的写代码</p><h3 id="1-entity">1. entity</h3><p>先看下数据库表结构</p><p><img src="https://img.777nx.cn/test/image-20230330174111302.png" alt="image-20230330174111302"></p><p>要在<code>eshop-business</code>模块下新建<code>src\main\java</code>的文件夹，在该文件夹下创建<code>com.eshop.entity</code>的包，在该包下创建<code>StoreProductRelation</code>的实体类与之数据表一一对应，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreProductRelation</span> <span class="keyword">extends</span> <span class="title class_">BaseDomain</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为该表继承了<code>BaseDomain</code>，拥有父的属性</p><p><code>BaseDomain</code>的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">   <span class="meta">@TableField(</span></span><br><span class="line"><span class="meta">       fill = FieldFill.INSERT</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="meta">@JsonFormat(</span></span><br><span class="line"><span class="meta">       pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,</span></span><br><span class="line"><span class="meta">       timezone = &quot;GMT+8&quot;</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="keyword">private</span> Date createTime;</span><br><span class="line">   <span class="meta">@TableField(</span></span><br><span class="line"><span class="meta">       fill = FieldFill.UPDATE</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="meta">@JsonFormat(</span></span><br><span class="line"><span class="meta">       pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,</span></span><br><span class="line"><span class="meta">       timezone = &quot;GMT+8&quot;</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="keyword">private</span> Date updateTime;</span><br><span class="line">   <span class="meta">@TableLogic</span></span><br><span class="line">   <span class="meta">@JsonIgnore</span></span><br><span class="line">   <span class="meta">@TableField(</span></span><br><span class="line"><span class="meta">       fill = FieldFill.INSERT</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="keyword">private</span> Integer isDel;</span><br></pre></td></tr></table></figure><h3 id="2-mapper">2. mapper</h3><p>在<code>mapper</code>的包下新建<code>ProductRelationMapper</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.eshop.domain.StoreProductRelation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRelationMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;StoreProductRelation&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-service">3. service</h3><p>在<code>service</code>的包下新建<code>ProductRelationService</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.eshop.domain.StoreProductRelation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRelationService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;StoreProductRelation&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>ProductRelationServiceImpl</code>的实现类，实现<code>ProductRelationService</code>的接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.EshopException;</span><br><span class="line"><span class="keyword">import</span> com.eshop.domain.StoreProductRelation;</span><br><span class="line"><span class="keyword">import</span> com.eshop.mapper.ProductRelationMapper;</span><br><span class="line"><span class="keyword">import</span> com.eshop.service.ProductRelationService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductRelationServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductRelationMapper, StoreProductRelation&gt; <span class="keyword">implements</span> <span class="title class_">ProductRelationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductRelationMapper productRelationMapper;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-controller">4. controller</h3><p>在<code>com.eshop</code>下新建一个包，包名叫<code>controller</code>，新建一个类，类名叫<code>ProductCollectController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.NumberUtil;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.ApiResult;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.EshopException;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.bean.LocalUser;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.interceptor.AuthCheck;</span><br><span class="line"><span class="keyword">import</span> com.eshop.modules.product.param.StoreProductRelationQueryParam;</span><br><span class="line"><span class="keyword">import</span> com.eshop.service.ProductRelationService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/collect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductCollectController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductRelationService productRelationService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能编码">功能编码</h2><h3 id="1-商品添加收藏">1. 商品添加收藏</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/add</code></p><p><img src="https://img.777nx.cn/test/image-20230329114943308.png" alt="image-20230329114943308"></p><p>看报错<code>Request method 'POST' not supported</code>，不支持请求方法“POST”</p><p>开始编写controller层的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param body部分，需要查询的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否成功：成功 true，失败 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">addProductCollect</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    <span class="keyword">if</span> (!NumberUtil.isNumber(param.getId()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    productRelationService.addProductCollect(Long.valueOf(param.getId()), uid, param.getCategory());</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分注解说明：</p><ul><li>@NoRepeatSubmit：防止重复提交自定义注解</li><li>@AuthCheck：自定义注解实现用户行为认证</li><li>@Validated：参数验证注解</li></ul><h4 id="1-1-是否收藏">1.1 是否收藏</h4><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Boolean <span class="title function_">isProductRelation</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isProductCollect</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;StoreProductRelation&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.eq(StoreProductRelation::getProductId, productId)</span><br><span class="line">            .eq(StoreProductRelation::getUid, uid)</span><br><span class="line">            .eq(StoreProductRelation::getType, <span class="string">&quot;collect&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> productRelationMapper.selectCount(lqw);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-添加收藏">1.2 添加收藏</h4><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addProductCollect</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid, String category)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProductCollect</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid, String category)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isProductCollect(productId, uid))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;已收藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StoreProductRelation</span> <span class="variable">storeProductRelation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreProductRelation</span>();</span><br><span class="line">    storeProductRelation.setProductId(productId);</span><br><span class="line">    storeProductRelation.setUid(uid);</span><br><span class="line">    storeProductRelation.setType(category);</span><br><span class="line">    productRelationMapper.insert(storeProductRelation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-商品取消收藏">2. 商品取消收藏</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/del</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param body部分，需要查询的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否成功：成功 true，失败 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/del&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">delProductCollect</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    <span class="keyword">if</span> (!NumberUtil.isNumber(param.getId()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    productRelationService.delProductCollect(Long.valueOf(param.getId()), uid, param.getCategory());</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delProductCollect</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid, String category)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid       用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delProductCollect</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid, String category)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;StoreProductRelation&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.eq(StoreProductRelation::getProductId, productId)</span><br><span class="line">            .eq(StoreProductRelation::getUid, uid)</span><br><span class="line">            .eq(StoreProductRelation::getType, category);</span><br><span class="line">    <span class="type">StoreProductRelation</span> <span class="variable">productRelation</span> <span class="operator">=</span> productRelationMapper.selectOne(lqw);</span><br><span class="line">    <span class="keyword">if</span> (productRelation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.removeById(productRelation.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-批量删除收藏-足迹">3. 批量删除收藏/足迹</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/dels/&#123;productIds&#125;</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除收藏/足迹 collect收藏 foot 足迹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productIds 商品Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param body部分，需要查询的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否成功：成功 true，失败 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/dels/&#123;productIds&#125;&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">delCollects</span><span class="params">(<span class="meta">@PathVariable</span> String productIds,<span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    String[] ids = productIds.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ids.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (String id : ids) &#123;</span><br><span class="line">            productRelationService.delProductCollect(Long.valueOf(id), uid, param.getCategory());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-获取收藏或足迹">4. 获取收藏或足迹</h3><p>前端发过来的请求(使用的是get方式)：<code>http://localhost:8008/api/collect/user?limit=10&amp;page=1&amp;type=foot</code></p><p>后端接受的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;StoreProductRelationQueryVo&gt;&gt; <span class="title function_">UserCollect</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page, <span class="meta">@RequestParam(value = &quot;limit&quot;, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> limit, <span class="meta">@RequestParam(value = &quot;type&quot;)</span> String type)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;limit: &#123;&#125;&quot;</span>, limit);</span><br><span class="line">    log.info(<span class="string">&quot;page: &#123;&#125;&quot;</span>, page);</span><br><span class="line">    log.info(<span class="string">&quot;type: &#123;&#125;&quot;</span>, type);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现可以接收到前端参数后，开始补全<code>controller</code>层代码，添加下面的接口代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户收藏列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 页码,默认为 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit 页大小,默认为 10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type foot为足迹，collect为收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;StoreProductRelationQueryVo&gt;&gt; <span class="title function_">UserCollect</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page, <span class="meta">@RequestParam(value = &quot;limit&quot;, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> limit, <span class="meta">@RequestParam(value = &quot;type&quot;)</span> String type)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    List&lt;StoreProductRelationQueryVo&gt; storeProductRelationQueryVos = productRelationService.userProductCollect(page, limit, uid, type);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok(storeProductRelationQueryVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们发现API文档要返回的数据并不能够满足我们的需求</p><p><img src="https://img.777nx.cn/test/image-20230330225306494.png" alt="image-20230330225306494"></p><p>通过分析返回的数据是来自<code>store_product_relation</code>和<code>store_product</code>两张表的字段，因此需要在<code>vo</code>包下造个<code>StoreProductRelationQueryVo</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.serializer.DoubleSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreProductRelationQueryVo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">serialVersion</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> String storeName;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="meta">@JsonSerialize(using = DoubleSerializer.class)</span></span><br><span class="line">    <span class="keyword">private</span> Double otPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer sales;</span><br><span class="line">    <span class="keyword">private</span> Integer isShow;</span><br><span class="line">    <span class="keyword">private</span> Integer isIntegral;</span><br><span class="line">    <span class="keyword">private</span> Integer integer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.777nx.cn/test/image-20230330225930287.png" alt="image-20230330225930287"></p><p><img src="https://img.777nx.cn/test/image-20230330230551222.png" alt="image-20230330230551222"></p><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户收藏列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit 页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type foot为足迹 collect为收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">userProductCollect</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, Long uid, String type)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户收藏列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit 页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type foot为足迹 collect为收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户Id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">userProductCollect</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, Long uid, String type)</span> &#123;</span><br><span class="line">    <span class="comment">// IPage&lt;StoreProductRelation&gt; pageModel = new Page&lt;&gt;(page, limit);</span></span><br><span class="line">    Page&lt;StoreProductRelation&gt; pageModel = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, limit);</span><br><span class="line">    List&lt;StoreProductRelationQueryVo&gt; list = productRelationMapper.selectRelationList(pageModel, uid, type);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里不能够用<code>mybatis-plus的分页插件</code>，控制台会报<code>Handler dispatch failed; nested exception is java.lang.NoSuchMethodError</code>的错误，我推测的sql语句的问题</p></blockquote><p>因为该业务涉及到多表查询，<code>mybatisplus</code>并未给我们提供相关可以调用的接口，所以我们需要自己编写sql语句，去实现我们的需求。sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select B.id pid,A.type as category,B.store_name as storeName,B.price,B.is_integral as isIntegral, B.ot_price as otPrice,B.sales,B.image,B.is_show as isShow,B.integral as integral from store_product_relation A left join store_product B on A.product_id = B.id where A.type=&#x27;foot&#x27; and A.uid=1 and A.is_del = 0 and B.is_del = 0 order by A.create_time desc</span><br></pre></td></tr></table></figure><p>mapper层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select B.id pid,A.type as category,B.store_name as storeName,B.price,B.is_integral as isIntegral,&quot; +</span></span><br><span class="line"><span class="meta">        &quot;B.ot_price as otPrice,B.sales,B.image,B.is_show as isShow,B.integral as integral&quot; +</span></span><br><span class="line"><span class="meta">        &quot; from store_product_relation A left join store_product B &quot; +</span></span><br><span class="line"><span class="meta">        &quot;on A.product_id = B.id where A.type=#&#123;type&#125; and A.uid=#&#123;uid&#125; and A.is_del = 0 and B.is_del = 0 order by A.create_time desc&quot;)</span></span><br><span class="line">List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">selectRelationList</span><span class="params">(Page page, <span class="meta">@Param(&quot;uid&quot;)</span> Long uid, <span class="meta">@Param(&quot;type&quot;)</span> String type)</span>;</span><br></pre></td></tr></table></figure><p>至此功能编码完毕！！</p><h2 id="程序排错">程序排错</h2><h3 id="任务描述">任务描述</h3><p>接口地址<code>/api/register</code>输入相同的手机号注册新用户时，页面显示了SQL错误。正常情况应该显示该手机号已存在。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\r\n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#x27;13512345678&#x27; for key &#x27;username&#x27;\r\n### The error may exist in com/eshop/modules/user/service/mapper/UserMapper.java (best guess)\r\n### The error may involve com.eshop.modules.user.service.mapper.UserMapper.insert-Inline\r\n### The error occurred while setting parameters\r\n### SQL: INSERT INTO eshop_user  ( username, password,       nickname, avatar, phone, add_ip, last_ip,         user_type,        create_time,  is_del )  VALUES  ( ?, ?,       ?, ?, ?, ?, ?,         ?,        ?,  ? )\r\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#x27;13512345678&#x27; for key &#x27;username&#x27;\n; Duplicate entry &#x27;13512345678&#x27; for key &#x27;username&#x27;; nested exception is java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#x27;13512345678&#x27; for key &#x27;username&#x27;</span><br></pre></td></tr></table></figure><h3 id="要求">要求</h3><p>修改完代码之后，相同手机号注册时应提示手机号已存在。</p><h3 id="代码编写">代码编写</h3><p>对该接口代码进行分析，发现并未对获得<code>shopUser</code>的对象做判断是否为空对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;H5/APP注册新用户&quot;, notes = &quot;H5/APP注册新用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;String&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> RegParam param)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeObj</span> <span class="operator">=</span> redisUtil.get(<span class="string">&quot;code_&quot;</span> + param.getAccount());</span><br><span class="line">    <span class="keyword">if</span>(codeObj == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.fail(<span class="string">&quot;请先获取验证码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> codeObj.toString();</span><br><span class="line">    <span class="keyword">if</span> (!StrUtil.equals(code, param.getCaptcha())) &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShopUser</span> <span class="variable">shopUser</span> <span class="operator">=</span> userService.getOne(Wrappers.&lt;ShopUser&gt;lambdaQuery()</span><br><span class="line">            .eq(ShopUser::getPhone,param.getAccount()),<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    authService.register(param);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok(<span class="string">&quot;&quot;</span>,<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此编写以下代码对<code>shopUser</code>进行是否为空对象判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ObjectUtil.isNotNull(shopUser))&#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.fail(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试后成功！！</p>]]></content>
    
    
    <summary type="html">eshop商城项目实训代码重构</summary>
    
    
    
    <category term="Java" scheme="https://www.777nx.cn/categories/Java/"/>
    
    
    <category term="eshop" scheme="https://www.777nx.cn/tags/eshop/"/>
    
  </entry>
  
  <entry>
    <title>eshop商城项目实训源码</title>
    <link href="https://www.777nx.cn/posts/3bc4be07.html"/>
    <id>https://www.777nx.cn/posts/3bc4be07.html</id>
    <published>2023-03-29T13:59:53.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon flat"><p><strong>eshop商城项目实训系列教程导航</strong></p><ol><li><a href="https://www.777nx.cn/posts/3bc4be07.html">eshop商城项目实训源码</a> &lt;= 当前位置</li><li><a href="https://www.777nx.cn/posts/f56b144a.html">eshop商城项目实训代码重构</a></li></ol></div><h2 id="基本架构">基本架构</h2><p>要先把基本框架搭建起来，才能够愉快的写代码</p><h3 id="1-domain">1. domain</h3><p>在<code>eshop-business</code>模块下新建<code>src\main\java</code>的文件夹，在该文件夹下创建<code>com.eshop.modules.business.domain</code>的包，在该包下创建<code>StoreProductRelation</code>的实体类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.<span class="keyword">module</span>.business.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.eshop.domain.BaseDomain;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreProductRelation</span> <span class="keyword">extends</span> <span class="title class_">BaseDomain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;商品ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;类型(收藏(collect）、点赞(like)、足迹(foot))&quot;)</span></span><br><span class="line"><span class="meta">    private String type;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;某种类型的商品(普通商品、秒杀商品)&quot;)</span></span><br><span class="line"><span class="meta">    private String category;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>部分注解说明：</p><ul><li>@Builder：为类生成相对略微复杂的构建器 API</li><li>@ApiModelProperty：添加和操作属性模块的数据</li></ul><h3 id="2-mapper">2. mapper</h3><p>在<code>mapper</code>的包下新建<code>ProductRelationMapper</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.<span class="keyword">module</span>.business.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.common.mapper.CoreMapper;</span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.domain.StoreProductRelation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRelationMapper</span> <span class="keyword">extends</span> <span class="title class_">CoreMapper</span>&lt;StoreProductRelation&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中接口<code>ProductRelationMapper</code>继承的<code>CoreMapper</code>，<code>CoreMapper</code>继承<code>BaseMapper</code>，相当于<code>ProductRelationMapper</code>继承<code>CoreMapper</code></p><p><img src="https://img.777nx.cn/test/image-20230329123904643.png" alt="image-20230329123904643"></p><h3 id="3-service">3. service</h3><p>在<code>service</code>的包下新建<code>ProductRelationService</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.<span class="keyword">module</span>.business.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.common.service.BaseService;</span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.domain.StoreProductRelation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRelationService</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span>&lt;StoreProductRelation&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>ProductRelationServiceImpl</code>的实现类，实现<code>ProductRelationService</code>的接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.<span class="keyword">module</span>.business.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;</span><br><span class="line"><span class="keyword">import</span> com.eshop.api.EshopException;</span><br><span class="line"><span class="keyword">import</span> com.eshop.common.service.impl.BaseServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.eshop.dozer.service.IGenerator;</span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.domain.StoreProductRelation;</span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.mapper.ProductRelationMapper;</span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.service.ProductRelationService;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductRelationServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseServiceImpl</span>&lt;ProductRelationMapper, StoreProductRelation&gt; <span class="keyword">implements</span> <span class="title class_">ProductRelationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductRelationMapper productRelationMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IGenerator generator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-controller">4. controller</h3><p>在<code>com.eshop</code>下新建一个包，包名叫<code>controller</code>，新建一个类，类名叫<code>ProductCollectController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.<span class="keyword">module</span>.business.service.ProductRelationService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(value = &quot;产品模块&quot;, tags = &quot;商城:产品模块&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductCollectController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProductRelationService productRelationService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分注解说明：</p><ul><li>@Api：用在请求的类上,表示对类的说明</li><li>@RequiredArgsConstructor：生成带有必需参数的构造函数</li></ul><h2 id="功能编码">功能编码</h2><h3 id="1-商品添加收藏">1. 商品添加收藏</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/add</code></p><p><img src="https://img.777nx.cn/test/image-20230329114943308.png" alt="image-20230329114943308"></p><p>看报错<code>Request method 'POST' not supported</code>，不支持请求方法“POST”</p><p>开始编写controller层的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param body部分，需要查询的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否成功：成功 true，失败 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AppLog(value = &quot;添加收藏&quot;, type = 1)</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;//collect/add&quot;)</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;添加收藏&quot;, notes = &quot;添加收藏&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">collectAdd</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    <span class="keyword">if</span> (!NumberUtil.isNumber(param.getId()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调业务层</span></span><br><span class="line">    productRelationService.addRroductRelation(Long.valueOf(param.getId()), uid, param.getCategory());</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分注解说明：</p><ul><li>@AppLog：自定义日志注解</li><li>@NoRepeatSubmit：防止重复提交自定义注解</li><li>@AuthCheck：自定义注解实现用户行为认证</li><li>@ApiModelProperty：添加和操作属性模块的数据</li></ul><h4 id="1-1-是否收藏">1.1 是否收藏</h4><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Boolean <span class="title function_">isProductRelation</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">isProductRelation</span><span class="params">(<span class="type">long</span> productId, <span class="type">long</span> uid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> productRelationMapper</span><br><span class="line">            .selectCount(Wrappers.&lt;StoreProductRelation&gt;lambdaQuery()</span><br><span class="line">                    .eq(StoreProductRelation::getUid,uid)</span><br><span class="line">                    .eq(StoreProductRelation::getType,<span class="string">&quot;collect&quot;</span>)</span><br><span class="line">                    .eq(StoreProductRelation::getProductId,productId));</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-添加收藏">1.2 添加收藏</h4><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addRroductRelation</span><span class="params">(<span class="type">long</span> productId,<span class="type">long</span> uid,String category)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRroductRelation</span><span class="params">(<span class="type">long</span> productId,<span class="type">long</span> uid,String category)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isProductRelation(productId,uid)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;已收藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StoreProductRelation</span> <span class="variable">storeProductRelation</span> <span class="operator">=</span> StoreProductRelation.builder()</span><br><span class="line">            .productId(productId)</span><br><span class="line">            .uid(uid)</span><br><span class="line">            .type(category)</span><br><span class="line">            .build();</span><br><span class="line">    productRelationMapper.insert(storeProductRelation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-商品取消收藏">2. 商品取消收藏</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/del</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AppLog(value = &quot;取消收藏&quot;, type = 1)</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/collect/del&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;取消收藏&quot;,notes = &quot;取消收藏&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">collectDel</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    <span class="keyword">if</span>(!NumberUtil.isNumber(param.getId())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    productRelationService.delRroductRelation(Long.valueOf(param.getId()),</span><br><span class="line">            uid,param.getCategory());</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delRroductRelation</span><span class="params">(<span class="type">long</span> productId,<span class="type">long</span> uid,String category)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消收藏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delRroductRelation</span><span class="params">(<span class="type">long</span> productId,<span class="type">long</span> uid,String category)</span> &#123;</span><br><span class="line">    <span class="type">StoreProductRelation</span> <span class="variable">productRelation</span> <span class="operator">=</span> <span class="built_in">this</span>.lambdaQuery()</span><br><span class="line">            .eq(StoreProductRelation::getProductId,productId)</span><br><span class="line">            .eq(StoreProductRelation::getUid,uid)</span><br><span class="line">            .eq(StoreProductRelation::getType,category)</span><br><span class="line">            .one();</span><br><span class="line">    <span class="keyword">if</span>(productRelation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.removeById(productRelation.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-批量删除收藏-足迹">3. 批量删除收藏/足迹</h3><p>前端发过来的请求(使用的是post方式)：<code>http://localhost:8008/api/collect/dels/&#123;productIds&#125;</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AppLog(value = &quot;批量取消收藏&quot;, type = 1)</span></span><br><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/collect/dels/&#123;productIds&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;批量取消收藏&quot;,notes = &quot;批量取消收藏&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title function_">collectDels</span><span class="params">(<span class="meta">@PathVariable</span> String productIds,<span class="meta">@RequestBody</span> StoreProductRelationQueryParam param)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">    String[] ids = productIds.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ids.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (String id : ids)&#123;</span><br><span class="line">            productRelationService.delRroductRelation(Long.parseLong(id), uid, param.getCategory());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EshopException</span>(<span class="string">&quot;参数非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-获取收藏或足迹">4. 获取收藏或足迹</h3><p>前端发过来的请求(使用的是get方式)：<code>http://localhost:8008/api/collect/user</code></p><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AuthCheck</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/collect/user&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;page&quot;, value = &quot;页码,默认为1&quot;, paramType = &quot;query&quot;, dataType = &quot;int&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;limit&quot;, value = &quot;页大小,默认为10&quot;, paramType = &quot;query&quot;, dataType = &quot;int&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;type&quot;, value = &quot;foot为足迹,collect为收藏&quot;, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取收藏产品,或足迹&quot;,notes = &quot;获取收藏产品,或足迹&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;List&lt;StoreProductRelationQueryVo&gt;&gt; <span class="title function_">collectUser</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;,defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                                                                    <span class="meta">@RequestParam(value = &quot;limit&quot;,defaultValue = &quot;500&quot;)</span> <span class="type">int</span> limit,</span></span><br><span class="line"><span class="params">                                                                    <span class="meta">@RequestParam(value = &quot;type&quot;)</span> String type)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> LocalUser.getUser().getUid();</span><br><span class="line">        List&lt;StoreProductRelationQueryVo&gt; storeProductRelationQueryVos = productRelationService.userCollectProduct(page, limit, uid, type);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.ok(storeProductRelationQueryVos);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时我们现有的实体类对象返回的数据，并不能够满足我们的需求，因此需要在<code>vo</code>包下造个<code>StoreProductRelationQueryVo</code>的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eshop.modules.business.vo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.eshop.serializer.DoubleSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;StoreProductRelationQueryVo对象&quot;, description = &quot;商品点赞和收藏表查询参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreProductRelationQueryVo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;商品ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;类型(收藏(collect）、点赞(like))&quot;)</span></span><br><span class="line"><span class="meta">    private String type;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;某种类型的商品(普通商品、秒杀商品)&quot;)</span></span><br><span class="line"><span class="meta">    private String category;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;添加时间&quot;)</span></span><br><span class="line"><span class="meta">    private Date createTime;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;产品图片&quot;)</span></span><br><span class="line"><span class="meta">    private String image;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;是否显示&quot;)</span></span><br><span class="line"><span class="meta">    private Integer isShow;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;原价&quot;)</span></span><br><span class="line"><span class="meta">    @JsonSerialize(using = DoubleSerializer.class)</span></span><br><span class="line"><span class="meta">    private Double otPrice;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;父ID&quot;)</span></span><br><span class="line"><span class="meta">    private Integer pid;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;产品价格&quot;)</span></span><br><span class="line"><span class="meta">    @JsonSerialize(using = DoubleSerializer.class)</span></span><br><span class="line"><span class="meta">    private Double price;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;产品销量&quot;)</span></span><br><span class="line"><span class="meta">    private Integer sales;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;商品名称&quot;)</span></span><br><span class="line"><span class="meta">    private String storeName;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;是否开启积分兑换&quot;)</span></span><br><span class="line"><span class="meta">    private Integer isIntegral;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @ApiModelProperty(value = &quot;积分&quot;)</span></span><br><span class="line"><span class="meta">    private Integer integral;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户收藏列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit limit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">userCollectProduct</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, Long uid, String type)</span>;</span><br></pre></td></tr></table></figure><p>实现该业务功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户收藏列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit limit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">userCollectProduct</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> limit, Long uid, String type)</span> &#123;</span><br><span class="line">    Page&lt;StoreProductRelation&gt; pageModel = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, limit);</span><br><span class="line">    List&lt;StoreProductRelationQueryVo&gt; list = productRelationMapper.selectRelationList(pageModel,uid,type);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为此操作涉及到多表查询，mybatisplus并未给我们提供相关可以调用的接口，因此我们需要自己编写接口，实现我们的需求。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select B.id pid,A.type as category,B.store_name as storeName,B.price,B.is_integral as isIntegral,&quot; +</span></span><br><span class="line"><span class="meta">            &quot;B.ot_price as otPrice,B.sales,B.image,B.is_show as isShow,B.integral as integral&quot; +</span></span><br><span class="line"><span class="meta">            &quot; from store_product_relation A left join store_product B &quot; +</span></span><br><span class="line"><span class="meta">            &quot;on A.product_id = B.id where A.type=#&#123;type&#125; and A.uid=#&#123;uid&#125; and A.is_del = 0 and B.is_del = 0 order by A.create_time desc&quot;)</span></span><br><span class="line">    List&lt;StoreProductRelationQueryVo&gt; <span class="title function_">selectRelationList</span><span class="params">(Page page, <span class="meta">@Param(&quot;uid&quot;)</span> Long uid, <span class="meta">@Param(&quot;type&quot;)</span> String type)</span>;</span><br></pre></td></tr></table></figure><p>至此接口编写完毕！！</p><h2 id="程序排错">程序排错</h2>]]></content>
    
    
    <summary type="html">eshop商城项目实训源码</summary>
    
    
    
    <category term="Java" scheme="https://www.777nx.cn/categories/Java/"/>
    
    
    <category term="eshop" scheme="https://www.777nx.cn/tags/eshop/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm管理不同版本的node与npm</title>
    <link href="https://www.777nx.cn/posts/8da2db9d.html"/>
    <id>https://www.777nx.cn/posts/8da2db9d.html</id>
    <published>2023-03-24T16:15:09.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>随着大前端的快速发展，node版本更新很快，我们在工作中，可以会有老版本的node的项目需要维护，也可能有新版本的node的项目需要开发，如果我们只有一个node版本的话将会很麻烦，nvm可以解决我们的难点</p><h2 id="教程">教程</h2><p>下载安装nvm之前，我先解释一下前端容易混淆的几个概念</p><ul><li><p>Node.js：基于Chrome V8引擎的JS运行环境（javascript代码运行环境）</p></li><li><p>npm：第三方js插件包管理工具，会随着node一起安装（Node package Manager）</p></li></ul><h3 id="1-下载">1. 下载</h3><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm github下载地址</a></p><p><img src="https://img.777nx.cn/test/image-20230324162449120.png" alt="image-20230324162449120"></p><h3 id="2-安装">2. 安装</h3><ol><li><p>首先最重要的是：一定要卸载已安装的 NodeJS，否则会发生冲突。</p></li><li><p>安装时，建议选择手动安装版，然后疯狂下一步就行，不要尝试改变安装目录<br>（我因为不想放在C盘，被折磨了好几个小时，老老实实默认下一步，省事）</p></li></ol><h3 id="3-检查安装是否成功">3. 检查安装是否成功</h3><p>在命令行输入 nvm 能出现反应就行OK了</p><p><img src="https://img.777nx.cn/test/image-20230324162653757.png" alt="image-20230324162653757"></p><h3 id="4-使用">4. 使用</h3><table><thead><tr><th style="text-align:center"><strong>命令</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center">nvm ls</td><td style="text-align:center">列出所有已安装的 node 版本</td></tr><tr><td style="text-align:center">nvm ls-remote</td><td style="text-align:center">列出所有远程服务器的版本（官方node version list）</td></tr><tr><td style="text-align:center">nvm list</td><td style="text-align:center">列出所有已安装的 node 版本</td></tr><tr><td style="text-align:center">nvm list available</td><td style="text-align:center">显示所有可下载的版本</td></tr><tr><td style="text-align:center">nvm install stable</td><td style="text-align:center">安装最新版 node</td></tr><tr><td style="text-align:center">nvm install [node版本号]</td><td style="text-align:center">安装指定版本 node</td></tr><tr><td style="text-align:center">nvm uninstall [node版本号]</td><td style="text-align:center">删除已安装的指定版本</td></tr><tr><td style="text-align:center">nvm use [node版本号]</td><td style="text-align:center">切换到指定版本 node</td></tr><tr><td style="text-align:center">nvm current</td><td style="text-align:center">当前 node 版本</td></tr><tr><td style="text-align:center">nvm alias [别名] [node版本号]</td><td style="text-align:center">给不同的版本号添加别名</td></tr><tr><td style="text-align:center">nvm unalias [别名]</td><td style="text-align:center">删除已定义的别名</td></tr><tr><td style="text-align:center">nvm alias default [node版本号]</td><td style="text-align:center">设置默认版本</td></tr></tbody></table><h2 id="参考文档">参考文档</h2><ol><li><p><a href="https://blog.csdn.net/jj2320711457/article/details/117431854">nvm使用教程</a></p></li><li><p><a href="https://blog.csdn.net/v_vszhao/article/details/125329517">nvm常用命令</a></p></li></ol><h2 id="最后">最后</h2><p>如果我一开始就知道这工具，就不用两个版本来回装好几次，各种bug各种不兼容都是泪啊</p>]]></content>
    
    
    <summary type="html">使用nvm管理不同版本的node与npm</summary>
    
    
    
    <category term="前端" scheme="https://www.777nx.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="npm" scheme="https://www.777nx.cn/tags/npm/"/>
    
    <category term="node" scheme="https://www.777nx.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus笔记</title>
    <link href="https://www.777nx.cn/posts/b5007741.html"/>
    <id>https://www.777nx.cn/posts/b5007741.html</id>
    <published>2023-03-24T15:35:29.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus">MyBatisPlus</h2><p><strong>今日目标</strong></p><blockquote><p>基于MyBatisPlus完成标准Dao的增删改查功能</p><p>掌握MyBatisPlus中的分页及条件查询构建</p></blockquote><h2 id="1，MyBatisPlus入门案例与简介">1，MyBatisPlus入门案例与简介</h2><p>对于MyBatisPlus的学习，我们将顺序做了调整，主要的原因MyBatisPlus主要是对MyBatis的简化，所有我们先体会下它简化在哪，然后再学习它是什么，以及它帮我们都做哪些事。</p><h3 id="1-1-入门案例">1.1 入门案例</h3><ul><li><p>MybatisPlus(简称MP)是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提供效率。</p></li><li><p>开发方式</p><ul><li>基于MyBatis使用MyBatisPlus</li><li>基于Spring使用MyBatisPlus</li><li>==基于SpringBoot使用MyBatisPlus==</li></ul></li></ul><p>SpringBoot刚刚我们学习完成，它能快速构建Spring开发环境用以整合其他技术，使用起来是非常简单，对于MP的学习，我们也基于SpringBoot来构建学习。</p><p>学习之前，我们先来回顾下，SpringBoot整合Mybatis的开发过程:</p><ul><li><p>创建SpringBoot工程</p><p><img src="https://img.777nx.cn/test/1630997819698.png" alt="1630997819698"></p></li><li><p>勾选配置使用的技术，能够实现自动添加起步依赖包</p><p><img src="https://img.777nx.cn/test/1630997860020.png" alt="1630997860020"></p></li><li><p>设置dataSource相关属性(JDBC参数)</p><p><img src="https://img.777nx.cn/test/1630997901479.png" alt="1630997901479"></p></li><li><p>定义数据层接口映射配置</p><p><img src="https://img.777nx.cn/test/1630997929891.png" alt="1630997929891"></p></li></ul><p>我们可以参考着上面的这个实现步骤把SpringBoot整合MyBatisPlus来快速实现下，具体的实现步骤为:</p><h4 id="步骤1-创建数据库及表">步骤1:创建数据库及表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> mybatisplus_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use mybatisplus_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password  <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">    tel <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;18866668888&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;16688886666&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jock&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">41</span>,<span class="string">&#x27;18812345678&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;4006184000&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="步骤2-创建SpringBoot工程">步骤2:创建SpringBoot工程</h4><p><img src="https://img.777nx.cn/test/1630998241426.png" alt="1630998241426"></p><h4 id="步骤3-勾选配置使用技术">步骤3:勾选配置使用技术</h4><p><img src="https://img.777nx.cn/test/1630998321660.png" alt="1630998321660"></p><p><strong>说明:</strong></p><ul><li>由于MP并未被收录到idea的系统内置配置，无法直接选择加入，需要手动在pom.xml中配置添加</li></ul><h4 id="步骤4-pom-xml补全依赖">步骤4:pom.xml补全依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li><p>druid数据源可以加也可以不加，SpringBoot有内置的数据源，可以配置成使用Druid数据源</p></li><li><p>从MP的依赖关系可以看出，通过依赖传递已经将MyBatis与MyBatis整合Spring的jar包导入，我们不需要额外在添加MyBatis的相关jar包</p><p><img src="https://img.777nx.cn/test/1631206757758.png" alt="1631206757758"></p></li></ul><h4 id="步骤5-添加MP的相关配置信息">步骤5:添加MP的相关配置信息</h4><p>resources默认生成的是properties配置文件，可以将其替换成yml文件，并在文件中配置数据库连接的相关信息:<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong>==serverTimezone是用来设置时区，UTC是标准时区，和咱们的时间差8小时，所以可以将其修改为<code>Asia/Shanghai</code>==</p><h4 id="步骤6-根据数据库表创建实体类">步骤6:根据数据库表创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;   </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="comment">//setter...getter...toString方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7-创建Dao接口">步骤7:创建Dao接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤8-编写引导类">步骤8:编写引导类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.itheima.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Mybatisplus01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**说明:**Dao接口要想被容器扫描到，有两种解决方案:</p><ul><li>方案一:在Dao接口上添加<code>@Mapper</code>注解，并且确保Dao处在引导类所在包或其子包中<ul><li>该方案的缺点是需要在每一Dao接口中添加注解</li></ul></li><li>方案二:在引导类上添加<code>@MapperScan</code>注解，其属性为所要扫描的Dao所在包<ul><li>该方案的好处是只需要写一次，则指定包下的所有Dao接口都能被扫描到，<code>@Mapper</code>就可以不写。</li></ul></li></ul><h4 id="步骤9-编写测试类">步骤9:编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MpDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>userDao注入的时候下面有红线提示的原因是什么?</p><ul><li><p>UserDao是一个接口，不能实例化对象</p></li><li><p>只有在服务器启动IOC容器初始化后，由框架创建DAO接口的代理对象来注入</p></li><li><p>现在服务器并未启动，所以代理对象也未创建，IDEA查找不到对应的对象注入，所以提示报红</p></li><li><p>一旦服务启动，就能注入其代理对象，所以该错误提示不影响正常运行。</p></li></ul><p>查看运行结果:</p><p><img src="https://img.777nx.cn/test/1630999646096.png" alt="1630999646096"></p><p>跟之前整合MyBatis相比，你会发现我们不需要在DAO接口中编写方法和SQL语句了，只需要继承<code>BaseMapper</code>接口即可。整体来说简化很多。</p><h3 id="1-2-MybatisPlus简介">1.2 MybatisPlus简介</h3><p>MyBatisPlus（简称MP）是基于MyBatis框架基础上开发的增强型工具，旨在==简化开发、提高效率==</p><p>通过刚才的案例，相信大家能够体会简化开发和提高效率这两个方面的优点。</p><p>MyBatisPlus的官网为:<code>https://mp.baomidou.com/</code></p><p><strong>说明:</strong></p><p><img src="https://img.777nx.cn/test/1631011942323.png" alt="1631011942323"></p><p>现在的页面中，这一行已经被删除，现在再去访问<code>https://mybatis.plus</code>会发现访问不到，这个就有很多可能性供我们猜想了，所以大家使用baomidou的网址进行访问即可。</p><p>官方文档中有一张很多小伙伴比较熟悉的图片:</p><p><img src="https://img.777nx.cn/test/1631012174092.png" alt="1631012174092"></p><p>从这张图中我们可以看出MP旨在成为MyBatis的最好搭档，而不是替换MyBatis,所以可以理解为MP是MyBatis的一套增强工具，它是在MyBatis的基础上进行开发的，我们虽然使用MP但是底层依然是MyBatis的东西，也就是说我们也可以在MP中写MyBatis的内容。</p><p>对于MP的学习，大家可以参考着官方文档来进行学习，里面都有详细的代码案例。</p><p>MP的特性:</p><ul><li>无侵入：只做增强不做改变，不会对现有工程产生影响</li><li>强大的 CRUD 操作：内置通用 Mapper，少量配置即可实现单表CRUD 操作</li><li>支持 Lambda：编写查询条件无需担心字段写错</li><li>支持主键自动生成</li><li>内置分页插件</li><li>……</li></ul><h2 id="2，标准数据层开发">2，标准数据层开发</h2><p>在这一节中我们重点学习的是数据层标准的CRUD(增删改查)的实现与分页功能。代码比较多，我们一个个来学习。</p><h3 id="2-1-标准CRUD使用">2.1 标准CRUD使用</h3><p>对于标准的CRUD功能都有哪些以及MP都提供了哪些方法可以使用呢?</p><p>我们先来看张图:</p><p><img src="https://img.777nx.cn/test/1631018877517.png" alt="1631018877517"></p><p>对于这张图的方法，我们挨个来演示下:</p><p>首先说下，案例中的环境就是咱们入门案例的内容，第一个先来完成<code>新增</code>功能</p><h3 id="2-2-新增">2.2 新增</h3><p>在进行新增之前，我们可以分析下新增的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span> <span class="params">(T t)</span></span><br></pre></td></tr></table></figure><ul><li><p>T:泛型，新增用来保存新增数据</p></li><li><p>int:返回值，新增成功后返回1，没有新增成功返回的是0</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setTel(<span class="string">&quot;4006184000&quot;</span>);</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试后，数据库表中就会添加一条数据。</p><p><img src="https://img.777nx.cn/test/1631013124310.png" alt="1631013124310"></p><p>但是数据中的主键ID，有点长，那这个主键ID是如何来的?我们更想要的是主键自增，应该是5才对，这个是我们后面要学习的主键ID生成策略，这块的这个问题，我们暂时先放放。</p><h3 id="2-3-删除">2.3 删除</h3><p>在进行删除之前，我们可以分析下删除的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li><p>Serializable：参数类型</p><ul><li><p>思考:参数类型为什么是一个序列化类?</p><p><img src="https://img.777nx.cn/test/1631013655771.png" alt="1631013655771"></p><p>从这张图可以看出，</p><ul><li>String和Number是Serializable的子类，</li><li>Number又是Float,Double,Integer等类的父类，</li><li>能作为主键的数据类型都已经是Serializable的子类，</li><li>MP使用Serializable作为参数类型，就好比我们可以用Object接收任何数据类型一样。</li></ul></li></ul></li><li><p>int:返回值类型，数据删除成功返回1，未删除数据返回0。</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.deleteById(<span class="number">1401856123725713409L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-修改">2.4 修改</h3><p>在进行修改之前，我们可以分析下修改的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(T t)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>T:泛型，需要修改的数据内容，注意因为是根据ID进行修改，所以传入的对象中需要有ID属性值</p></li><li><p>int:返回值，修改成功后返回1，未修改数据返回0</p></li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Tom888&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;tom888&quot;</span>);</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**说明:**修改的时候，只修改实体对象中有值的字段。</p><h3 id="2-5-根据ID查询">2.5 根据ID查询</h3><p>在进行根据ID查询之前，我们可以分析下根据ID查询的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">selectById</span> <span class="params">(Serializable id)</span></span><br></pre></td></tr></table></figure><ul><li>Serializable：参数类型,主键ID的值</li><li>T:根据ID查询只会返回一条数据</li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-查询所有">2.6 查询所有</h3><p>在进行查询所有之前，我们可以分析下查询所有的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</li><li>List<T>:因为查询的是所有，所以返回的数据是一个集合</li></ul><p>在测试类中进行新增操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们所调用的方法都是来自于DAO接口继承的BaseMapper类中。里面的方法有很多，我们后面会慢慢去学习里面的内容。</p><h3 id="2-7-Lombok">2.7 Lombok</h3><p>代码写到这，我们会发现DAO接口类的编写现在变成最简单的了，里面什么都不用写。反过来看看模型类的编写都需要哪些内容:</p><ul><li>私有属性</li><li>setter…getter…方法</li><li>toString方法</li><li>构造函数</li></ul><p>虽然这些内容不难，同时也都是通过IDEA工具生成的，但是过程还是必须得走一遍，那么对于模型类的编写有没有什么优化方法?就是我们接下来要学习的Lombok。</p><h4 id="概念">概念</h4><ul><li>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发。</li></ul><h4 id="使用步骤">使用步骤</h4><h5 id="步骤1-添加lombok依赖">步骤1:添加lombok依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;1.18.12&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**注意：**版本可以不用写，因为SpringBoot中已经管理了lombok的版本。</p><h5 id="步骤2-安装Lombok的插件">步骤2:安装Lombok的插件</h5><p>==新版本IDEA已经内置了该插件，如果删除setter和getter方法程序有报红，则需要安装插件==</p><p><img src="https://img.777nx.cn/test/1631016543648.png" alt="1631016543648"></p><p>如果在IDEA中找不到lombok插件，可以访问如下网站</p><p><code>https://plugins.jetbrains.com/plugin/6317-lombok/versions</code></p><p>根据自己IDEA的版本下载对应的lombok插件，下载成功后，在IDEA中采用离线安装的方式进行安装。</p><p><img src="https://img.777nx.cn/test/1631016876641.png" alt="1631016876641"></p><h5 id="步骤3-模型类上添加注解">步骤3:模型类上添加注解</h5><p>Lombok常见的注解有:</p><ul><li>@Setter:为模型类的属性提供setter方法</li><li>@Getter:为模型类的属性提供getter方法</li><li>@ToString:为模型类的属性提供toString方法</li><li>@EqualsAndHashCode:为模型类的属性提供equals和hashcode方法</li><li>==@Data:是个组合注解，包含上面的注解的功能==</li><li>==@NoArgsConstructor:提供一个无参构造函数==</li><li>==@AllArgsConstructor:提供一个包含所有参数的构造函数==</li></ul><p>Lombok的注解还有很多，上面标红的三个是比较常用的，其他的大家后期用到了，再去补充学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>Lombok只是简化模型类的编写，我们之前的方法也能用，比如有人会问:我如果只想要有name和password的构造函数，该如何编写?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是被允许的。</p><h3 id="2-8-分页功能">2.8 分页功能</h3><p>基础的增删改查就已经学习完了，刚才我们在分析基础开发的时候，有一个分页功能还没有实现，在MP中如何实现分页功能，就是咱们接下来要学习的内容。</p><p>分页查询使用的方法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span><br></pre></td></tr></table></figure><ul><li>IPage:用来构建分页查询条件</li><li>Wrapper：用来构建条件查询的条件，目前我们没有可直接传为Null</li><li>IPage:返回值，你会发现构建分页条件和方法的返回值都是IPage</li></ul><p>IPage是一个接口，我们需要找到它的实现类来构建它，具体的实现类，可以进入到IPage类中按ctrl+h,会找到其有一个实现类为<code>Page</code>。</p><h4 id="步骤1-调用方法传入参数获取返回值">步骤1:调用方法传入参数获取返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mybatisplus01QuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1 创建IPage分页对象,设置分页参数,1为当前页码，3为每页显示的记录数</span></span><br><span class="line">        IPage&lt;User&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2 执行分页查询</span></span><br><span class="line">        userDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//3 获取分页结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前页码值：&quot;</span>+page.getCurrent());</span><br><span class="line">        System.out.println(<span class="string">&quot;每页显示数：&quot;</span>+page.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少页：&quot;</span>+page.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;一共多少条数据：&quot;</span>+page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;数据：&quot;</span>+page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2-设置分页拦截器">步骤2:设置分页拦截器</h4><p>这个拦截器MP已经为我们提供好了，我们只需要将其配置成Spring管理的bean对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1 创建MybatisPlusInterceptor拦截器对象</span></span><br><span class="line">        MybatisPlusInterceptor mpInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2 添加分页拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**说明:**上面的代码记不住咋办呢?</p><p>这些内容在MP的官方文档中有详细的说明，我们可以查看官方文档类配置</p><p><img src="https://img.777nx.cn/test/1631208030131.png" alt="1631208030131"></p><h4 id="步骤3-运行测试程序">步骤3:运行测试程序</h4><p><img src="https://img.777nx.cn/test/1631019660480.png" alt="1631019660480"></p><p>如果想查看MP执行的SQL语句，可以修改application.yml配置文件，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#打印SQL日志到控制台</span></span><br></pre></td></tr></table></figure><p>打开日志后，就可以在控制台打印出对应的SQL语句，开启日志功能性能就会受到影响，调试完后记得关闭。</p><p><img src="https://img.777nx.cn/test/1631019896688.png" alt="1631019896688"></p>]]></content>
    
    
    <summary type="html">MyBatisPlus笔记</summary>
    
    
    
    <category term="Java" scheme="https://www.777nx.cn/categories/Java/"/>
    
    
    <category term="MyBatisPlus" scheme="https://www.777nx.cn/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级</title>
    <link href="https://www.777nx.cn/posts/ab2417d4.html"/>
    <id>https://www.777nx.cn/posts/ab2417d4.html</id>
    <published>2023-03-23T11:52:48.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>笔记来自于黑马程序员课程</p></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.bilibili.com/video/BV1Qf4y1T7Hx/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">黑马程序员JavaWeb基础教程</div>            <div class="tag-link-sitename">Java web从入门到企业实战完整版</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h2 id="mysql高级">mysql高级</h2><p><strong>今日目标</strong></p><blockquote><ul><li><p>掌握约束的使用</p></li><li><p>掌握表关系及建表原则</p></li><li><p>重点掌握多表查询操作</p></li><li><p>掌握事务操作</p></li></ul></blockquote><h2 id="1，约束">1，约束</h2><img src="https://img.777nx.cn/test/image-20210724104749122.png" alt="image-20210724104749122" style="zoom:70%;" /><p>上面表中可以看到表中数据存在一些问题：</p><ul><li><p>id 列一般是用标示数据的唯一性的，而上述表中的id为1的有三条数据，并且 <code>马花疼</code> 没有id进行标示</p></li><li><p><code>柳白</code> 这条数据的age列的数据是3000，而人也不可能活到3000岁</p></li><li><p><code>马运</code>  这条数据的math数学成绩是-5，而数学学得再不好也不可能出现负分</p></li><li><p><code>柳青</code> 这条数据的english列（英文成绩）值为null，而成绩即使没考也得是0分</p></li></ul><p>针对上述数据问题，我们就可以从数据库层面在添加数据的时候进行限制，这个就是约束。</p><h3 id="1-1-概念">1.1  概念</h3><ul><li><p>约束是作用于表中列上的规则，用于限制加入表的数据</p><p>例如：我们可以给id列加约束，让其值不能重复，不能为null值。</p></li><li><p>约束的存在保证了数据库中数据的正确性、有效性和完整性</p><p>添加约束可以在添加数据的时候就限制不正确的数据，年龄是3000，数学成绩是-5分这样无效的数据，继而保障数据的完整性。</p></li></ul><h3 id="1-2-分类">1.2  分类</h3><ul><li><strong>非空约束： 关键字是 NOT NULL</strong></li></ul><p>保证列中所有的数据不能有null值。</p><p>例如：id列在添加 <code>马花疼</code> 这条数据时就不能添加成功。</p><ul><li><p><strong>唯一约束：关键字是  UNIQUE</strong></p><p>保证列中所有数据各不相同。</p><p>例如：id列中三条数据的值都是1，这样的数据在添加时是绝对不允许的。</p></li><li><p><strong>主键约束： 关键字是  PRIMARY KEY</strong></p></li></ul><p>主键是一行数据的唯一标识，要求非空且唯一。一般我们都会给没张表添加一个主键列用来唯一标识数据。</p><p>例如：上图表中id就可以作为主键，来标识每条数据。那么这样就要求数据中id的值不能重复，不能为null值。</p><ul><li><p><strong>检查约束： 关键字是  CHECK</strong></p><p>保证列中的值满足某一条件。</p><p>例如：我们可以给age列添加一个范围，最低年龄可以设置为1，最大年龄就可以设置为300，这样的数据才更合理些。</p><blockquote><p>注意：MySQL不支持检查约束。</p><p>这样是不是就没办法保证年龄在指定的范围内了？从数据库层面不能保证，以后可以在java代码中进行限制，一样也可以实现要求。</p></blockquote></li><li><p><strong>默认约束： 关键字是   DEFAULT</strong></p><p>保存数据时，未指定值则采用默认值。</p><p>例如：我们在给english列添加该约束，指定默认值是0，这样在添加数据时没有指定具体值时就会采用默认给定的0。</p></li><li><p><strong>外键约束： 关键字是  FOREIGN KEY</strong></p><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p><p>外键约束现在可能还不太好理解，后面我们会重点进行讲解。</p></li></ul><h3 id="1-3-非空约束">1.3  非空约束</h3><ul><li><p>概念</p><p>非空约束用于保证列中所有数据不能有NULL值</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加非空约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-4-唯一约束">1.4  唯一约束</h3><ul><li><p>概念</p><p>唯一约束用于保证列中所有数据各不相同</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加唯一约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">UNIQUE</span> [AUTO_INCREMENT],</span><br><span class="line">   <span class="comment">-- AUTO_INCREMENT: 当不指定值时自动增长</span></span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">UNIQUE</span>(列名)</span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 字段名;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-5-主键约束">1.5  主键约束</h3><ul><li><p>概念</p><p>主键是一行数据的唯一标识，要求非空且唯一</p><p>一张表只能有一个主键</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">PRIMARY</span> KEY [AUTO_INCREMENT],</span><br><span class="line">   …</span><br><span class="line">); </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [约束名称] <span class="keyword">PRIMARY</span> KEY(列名)</span><br><span class="line">); </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段名);</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-6-默认约束">1.6  默认约束</h3><ul><li><p>概念</p><p>保存数据时，未指定值则采用默认值</p></li><li><p>语法</p><ul><li><p>添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加默认约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">   …</span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> 默认值;</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ALTER</span> 列名 <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-7-约束练习">1.7  约束练习</h3><p><strong>根据需求，为表添加合适的约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">id <span class="type">INT</span>,  <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">    ename <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名，非空且唯一</span></span><br><span class="line">    joindate <span class="type">DATE</span>,  <span class="comment">-- 入职日期，非空</span></span><br><span class="line">    salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),  <span class="comment">-- 工资，非空</span></span><br><span class="line">    bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)  <span class="comment">-- 奖金，如果没有将近默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面一定给出了具体的要求，我们可以根据要求创建这张表，并为每一列添加对应的约束。建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 员工姓名，非空并且唯一</span></span><br><span class="line">  joindate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 入职日期，非空</span></span><br><span class="line">  salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 工资，非空</span></span><br><span class="line">  bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">-- 奖金，如果没有奖金默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>通过上面语句可以创建带有约束的 <code>emp</code> 表，约束能不能发挥作用呢。接下来我们一一进行验证，先添加一条没有问题的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>验证主键约束，非空且唯一</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724114548170.png" alt="image-20210724114548170" style="zoom:80%;" /><p>从上面的结果可以看到，字段 <code>id</code> 不能为null。那我们重新添加一条数据，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724114805350.png" alt="image-20210724114805350" style="zoom:80%;" /><p>从上面结果可以看到，1这个值重复了。所以主键约束是用来限制数据非空且唯一的。那我们再添加一条符合要求的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724115024106.png" alt="image-20210724115024106" style="zoom:80%;" /><ul><li><strong>验证非空约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">3</span>,<span class="keyword">null</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724115149415.png" alt="image-20210724115149415" style="zoom:80%;" /><p>从上面结果可以看到，<code>ename</code> 字段的非空约束生效了。</p><ul><li><strong>验证唯一约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724115336916.png" alt="image-20210724115336916" style="zoom:80%;" /><p>从上面结果可以看到，<code>ename</code> 字段的唯一约束生效了。</p><ul><li><strong>验证默认约束</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>);</span><br></pre></td></tr></table></figure><p>执行完上面语句后查询表中数据，如下图可以看到王五这条数据的bonus列就有了默认值0。</p><img src="https://img.777nx.cn/test/image-20210724115547951.png" alt="image-20210724115547951" style="zoom:80%;" /><p>==注意：默认约束只有在不给值时才会采用默认值。如果给了null，那值就是null值。==</p><p>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>执行完上面语句后查询表中数据，如下图可以看到赵六这条数据的bonus列的值是null。</p><img src="https://img.777nx.cn/test/image-20210724115826516.png" alt="image-20210724115826516" style="zoom:80%;" /><ul><li><strong>验证自动增长： auto_increment  当列是数字类型 并且唯一约束</strong></li></ul><p>重新创建 <code>emp</code> 表，并给id列添加自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment, <span class="comment">-- 员工id，主键且自增长</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>, <span class="comment">-- 员工姓名，非空并且唯一</span></span><br><span class="line">  joindate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 入职日期，非空</span></span><br><span class="line">  salary <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> , <span class="comment">-- 工资，非空</span></span><br><span class="line">  bonus <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">-- 奖金，如果没有奖金默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来给emp添加数据，分别验证不给id列添加值以及给id列添加null值，id列的值会不会自动增长：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;赵六2&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,joindate,salary,bonus) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;赵六3&#x27;</span>,<span class="string">&#x27;1999-11-11&#x27;</span>,<span class="number">8800</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="1-8-外键约束">1.8  外键约束</h3><h4 id="1-8-1-概述">1.8.1  概述</h4><p>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性。</p><p>如何理解上面的概念呢？如下图有两张表，员工表和部门表：</p><img src="https://img.777nx.cn/test/image-20210724120904180.png" alt="image-20210724120904180" style="zoom:80%;" /><p>员工表中的dep_id字段是部门表的id字段关联，也就是说1号学生张三属于1号部门研发部的员工。现在我要删除1号部门，就会出现错误的数据（员工表中属于1号部门的数据）。而我们上面说的两张表的关系只是我们认为它们有关系，此时需要通过外键让这两张表产生数据库层面的关系，这样你要删除部门表中的1号部门的数据将无法删除。</p><h4 id="1-8-2-语法">1.8.2  语法</h4><ul><li>添加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加外键约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   列名 数据类型,</span><br><span class="line">   …</span><br><span class="line">   [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键列名) <span class="keyword">REFERENCES</span> 主表(主表列名) </span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名称) <span class="keyword">REFERENCES</span> 主表名称(主表列名称);</span><br></pre></td></tr></table></figure><ul><li>删除外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure><h4 id="1-8-3-练习">1.8.3  练习</h4><p>根据上述语法创建员工表和部门表，并添加上外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 员工表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键 dep_id,关联 dept 表的id主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> dept(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加 2 个部门</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(dep_name,addr) <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工,dep_id 表示员工所在的部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (NAME, age, dep_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;王五&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;赵六&#x27;</span>, <span class="number">20</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;孙七&#x27;</span>, <span class="number">22</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;周八&#x27;</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>此时删除 <code>研发部</code> 这条数据，会发现无法删除。</p><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">FOREIGN</span> key fk_emp_dept;</span><br></pre></td></tr></table></figure><p>重新添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> key(dep_id) <span class="keyword">REFERENCES</span> dept(id);</span><br></pre></td></tr></table></figure><h2 id="2，数据库设计">2，数据库设计</h2><h3 id="2-1-数据库设计简介">2.1  数据库设计简介</h3><ul><li><p>软件的研发步骤</p><img src="https://img.777nx.cn/test/image-20210724130925801.png" alt="image-20210724130925801" style="zoom:80%;" /></li><li><p>数据库设计概念</p><ul><li>数据库设计就是根据业务系统的具体需求，结合我们所选用的DBMS，为这个业务系统构造出最优的数据存储模型。</li><li>建立数据库中的==表结构==以及==表与表之间的关联关系==的过程。</li><li>有哪些表？表里有哪些字段？表和表之间有什么关系？</li></ul></li><li><p>数据库设计的步骤</p><ul><li><p>需求分析（数据是什么? 数据具有哪些属性? 数据与属性的特点是什么）</p></li><li><p>逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）</p><p>如下图就是ER(Entity/Relation)图：</p><img src="https://img.777nx.cn/test/image-20210724131210759.png" alt="image-20210724131210759" style="zoom:80%;" /></li><li><p>物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）</p></li><li><p>维护设计（1.对新的需求进行建表；2.表优化）</p></li></ul></li><li><p>表关系</p><ul><li><p>一对一</p><ul><li>如：用户 和 用户详情</li><li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li></ul><img src="https://img.777nx.cn/test/image-20210724133015129.png" alt="image-20210724133015129" style="zoom:80%;" /><p>上图左边是用户的详细信息，而我们真正在展示用户信息时最长用的则是上图右边红框所示，所以我们会将详细信息查分成两周那个表。</p></li><li><p>一对多</p><ul><li><p>如：部门 和 员工</p></li><li><p>一个部门对应多个员工，一个员工对应一个部门。如下图：</p><img src="https://img.777nx.cn/test/image-20210724133443094.png" alt="image-20210724133443094" style="zoom:90%;" /></li></ul></li><li><p>多对多</p><ul><li><p>如：商品 和 订单</p></li><li><p>一个商品对应多个订单，一个订单包含多个商品。如下图：</p><img src="https://img.777nx.cn/test/image-20210724133704682.png" alt="image-20210724133704682" style="zoom:80%;" /></li></ul></li></ul></li></ul><h3 id="2-2-表关系-一对多">2.2  表关系(一对多)</h3><ul><li><p>一对多</p><ul><li>如：部门 和 员工</li><li>一个部门对应多个员工，一个员工对应一个部门。</li></ul></li><li><p>实现方式</p><p>==在多的一方建立外键，指向一的一方的主键==</p></li><li><p>案例</p><p>我们还是以 <code>员工表</code> 和 <code>部门表</code> 举例:</p><img src="https://img.777nx.cn/test/image-20210724134145803.png" alt="image-20210724134145803" style="zoom:70%;" /><p>经过分析发现，员工表属于多的一方，而部门表属于一的一方，此时我们会在员工表中添加一列（dep_id），指向于部门表的主键（id）：</p><img src="https://img.777nx.cn/test/image-20210724134318685.png" alt="image-20210724134318685" style="zoom:70%;" /><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_dept(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 员工表 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_emp(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">dep_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键 dep_id,关联 dept 表的id主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_emp_dept <span class="keyword">FOREIGN</span> KEY(dep_id) <span class="keyword">REFERENCES</span> tb_dept(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看表结构模型图：</p><img src="https://img.777nx.cn/test/image-20210724140456921.png" alt="image-20210724140456921" style="zoom:80%;" /></li></ul><h3 id="2-3-表关系-多对多">2.3  表关系(多对多)</h3><ul><li><p>多对多</p><ul><li>如：商品 和 订单</li><li>一个商品对应多个订单，一个订单包含多个商品</li></ul></li><li><p>实现方式</p><p>==建立第三张中间表，中间表至少包含两个外键，分别关联两方主键==</p></li><li><p>案例</p><p>我们以 <code>订单表</code> 和 <code>商品表</code> 举例：</p><img src="https://img.777nx.cn/test/image-20210724134735939.png" alt="image-20210724134735939" style="zoom:70%;" /><p>经过分析发现，订单表和商品表都属于多的一方，此时需要创建一个中间表，在中间表中添加订单表的外键和商品表的外键指向两张表的主键：</p><img src="https://img.777nx.cn/test/image-20210724135054834.png" alt="image-20210724135054834" style="zoom:70%;" /><p>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order_goods;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_order;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_goods;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">payment <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">payment_type TINYINT,</span><br><span class="line">status TINYINT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_goods(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">title <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">price <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 订单商品中间表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_order_goods(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">order_id <span class="type">int</span>,</span><br><span class="line">goods_id <span class="type">int</span>,</span><br><span class="line">count <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_order_id <span class="keyword">FOREIGN</span> key(order_id) <span class="keyword">REFERENCES</span> tb_order(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_order_goods <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> fk_goods_id <span class="keyword">FOREIGN</span> key(goods_id) <span class="keyword">REFERENCES</span> tb_goods(id);</span><br></pre></td></tr></table></figure><p>查看表结构模型图：</p><img src="https://img.777nx.cn/test/image-20210724140307910.png" alt="image-20210724140307910" style="zoom:80%;" /></li></ul><h3 id="2-4-表关系-一对一">2.4  表关系(一对一)</h3><ul><li><p>一对一</p><ul><li>如：用户 和 用户详情</li><li>一对一关系多用于表拆分，将一个实体中经常使用的字段放一张表，不经常使用的字段放另一张表，用于提升查询性能</li></ul></li><li><p>实现方式</p><p>==在任意一方加入外键，关联另一方主键，并且设置外键为唯一(UNIQUE)==</p></li><li><p>案例</p><p>我们以 <code>用户表</code> 举例：</p><img src="https://img.777nx.cn/test/image-20210724135346913.png" alt="image-20210724135346913" style="zoom:70%;" /><p>而在真正使用过程中发现 id、photo、nickname、age、gender 字段比较常用，此时就可以将这张表查分成两张表。</p></li></ul><p>​<img src="https://img.777nx.cn/test/image-20210724135649341.png" alt="image-20210724135649341" style="zoom:70%;" /></p><p>​</p><p>​建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_desc (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">city <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">edu <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">income <span class="type">int</span>,</span><br><span class="line">status <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">des <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">photo <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">nickname <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">desc_id <span class="type">int</span> <span class="keyword">unique</span>,</span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_user_desc <span class="keyword">FOREIGN</span> KEY(desc_id) <span class="keyword">REFERENCES</span> tb_user_desc(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​查看表结构模型图：</p><img src="https://img.777nx.cn/test/image-20210724141445785.png" alt="image-20210724141445785" style="zoom:80%;" /><h3 id="2-5-数据库设计案例">2.5  数据库设计案例</h3><p>根据下图设计表及表和表之间的关系：</p><img src="https://img.777nx.cn/test/image-20210724141822204.png" alt="image-20210724141822204" style="zoom:80%;" /><p>经过分析，我们分为 <code>专辑表</code>  <code>曲目表</code>  <code>短评表</code>  <code>用户表</code>   4张表。</p><img src="https://img.777nx.cn/test/image-20210724141550446.png" alt="image-20210724141550446" style="zoom:80%;" /><p>一个专辑可以有多个曲目，一个曲目只能属于某一张专辑，所以专辑表和曲目表的关系是==一对多==。</p><p>一个专辑可以被多个用户进行评论，一个用户可以对多个专辑进行评论，所以专辑表和用户表的关系是 ==多对多==。</p><p>一个用户可以发多个短评，一个短评只能是某一个人发的，所以用户表和短评表的关系是 ==一对多==。</p><img src="https://img.777nx.cn/test/image-20210724142550839.png" alt="image-20210724142550839" style="zoom:80%;" /><h2 id="3，多表查询">3，多表查询</h2><p>多表查询顾名思义就是从多张表中一次性的查询出我们想要的数据。我们通过具体的sql给他们演示，先准备环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建部门表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">        did <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        dname <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 创建员工表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">        id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">        NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">        gender <span class="type">CHAR</span>(<span class="number">1</span>), <span class="comment">-- 性别</span></span><br><span class="line">        salary <span class="keyword">DOUBLE</span>, <span class="comment">-- 工资</span></span><br><span class="line">        join_date <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">        dep_id <span class="type">INT</span>,</span><br><span class="line">        <span class="keyword">FOREIGN</span> KEY (dep_id) <span class="keyword">REFERENCES</span> dept(did) <span class="comment">-- 外键，关联部门表(部门表的主键)</span></span><br><span class="line">    );</span><br><span class="line"><span class="comment">-- 添加部门数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (dNAME) <span class="keyword">VALUES</span> (<span class="string">&#x27;研发部&#x27;</span>),(<span class="string">&#x27;市场部&#x27;</span>),(<span class="string">&#x27;财务部&#x27;</span>),(<span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 添加员工数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(NAME,gender,salary,join_date,dep_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">7200</span>,<span class="string">&#x27;2013-02-24&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">3600</span>,<span class="string">&#x27;2010-12-02&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;唐僧&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">9000</span>,<span class="string">&#x27;2008-08-08&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;白骨精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;2015-10-07&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;蜘蛛精&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">4500</span>,<span class="string">&#x27;2011-03-14&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;小白龙&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">2500</span>,<span class="string">&#x27;2011-02-14&#x27;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>执行下面的多表查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept;  <span class="comment">-- 从emp和dept表中查询所有的字段数据</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://img.777nx.cn/test/image-20210724173630506.png" alt="image-20210724173630506" style="zoom:90%;" /><p>从上面的结果我们看到有一些无效的数据，如 <code>孙悟空</code> 这个员工属于1号部门，但也同时关联的2、3、4号部门。所以我们要通过限制员工表中的 <code>dep_id</code> 字段的值和部门表 <code>did</code> 字段的值相等来消除这些无效的数据，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept <span class="keyword">where</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行后结果如下：</p><img src="https://img.777nx.cn/test/image-20210724174212443.png" alt="image-20210724174212443" style="zoom:90%;" /><p>上面语句就是连接查询，那么多表查询都有哪些呢？</p><ul><li><p>连接查询</p><img src="https://img.777nx.cn/test/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" /> <ul><li>内连接查询 ：相当于查询AB交集数据</li><li>外连接查询<ul><li>左外连接查询 ：相当于查询A表所有数据和交集部门数据</li><li>右外连接查询 ： 相当于查询B表所有数据和交集部分数据</li></ul></li></ul></li><li><p>子查询</p></li></ul><h3 id="3-1-内连接查询">3.1  内连接查询</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span>,表<span class="number">2</span>… <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>内连接相当于查询 A B 交集数据</p></blockquote><img src="https://img.777nx.cn/test/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" /><ul><li><p>案例</p><ul><li><p>隐式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行上述语句结果如下：</p><img src="https://img.777nx.cn/test/image-20210724175344508.png" alt="image-20210724175344508" style="zoom:80%;" /></li><li><p>查询 emp的 name， gender，dept表的dname</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp. NAME,</span><br><span class="line">emp.gender,</span><br><span class="line">dept.dname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行语句结果如下：</p><img src="https://img.777nx.cn/test/image-20210724175518159.png" alt="image-20210724175518159" style="zoom:80%;" /><p>上面语句中使用表名指定字段所属有点麻烦，sql也支持给表指别名，上述语句可以改进为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">t1. NAME,</span><br><span class="line">t1.gender,</span><br><span class="line">t2.dname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">t1.dep_id <span class="operator">=</span> t2.did;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br><span class="line"><span class="comment">-- 上面语句中的inner可以省略，可以书写为如下语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp  <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://img.777nx.cn/test/image-20210724180103531.png" alt="image-20210724180103531" style="zoom:80%;" /></li></ul></li></ul><h3 id="3-2-外连接查询">3.2  外连接查询</h3><ul><li><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接：相当于查询A表所有数据和交集部分数据</p><p>右外连接：相当于查询B表所有数据和交集部分数据</p></blockquote><img src="https://img.777nx.cn/test/image-20210724174717647.png" alt="image-20210724174717647" style="zoom:80%;" /></li><li><p>案例</p><ul><li><p>查询emp表所有数据和对应的部门信息（左外连接）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行语句结果如下：</p><img src="https://img.777nx.cn/test/image-20210724180542757.png" alt="image-20210724180542757" style="zoom:80%;" /><p>结果显示查询到了左表（emp）中所有的数据及两张表能关联的数据。</p></li><li><p>查询dept表所有数据和对应的员工信息（右外连接）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure><p>执行语句结果如下：</p><img src="https://img.777nx.cn/test/image-20210724180613494.png" alt="image-20210724180613494" style="zoom:80%;" /><p>结果显示查询到了右表（dept）中所有的数据及两张表能关联的数据。</p><p>要查询出部门表中所有的数据，也可以通过左外连接实现，只需要将两个表的位置进行互换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-3-子查询">3.3  子查询</h3><ul><li><p>概念</p><p>==查询中嵌套查询，称嵌套查询为子查询。==</p><p>什么是查询中嵌套查询呢？我们通过一个例子来看：</p><p><strong>需求：查询工资高于猪八戒的员工信息。</strong></p><p>来实现这个需求，我们就可以通过二步实现，第一步：先查询出来 猪八戒的工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;猪八戒&#x27;</span></span><br></pre></td></tr></table></figure><p>第二步：查询工资高于猪八戒的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">3600</span>;</span><br></pre></td></tr></table></figure><p>第二步中的3600可以通过第一步的sql查询出来，所以将3600用第一步的sql语句进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;猪八戒&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这就是查询语句中嵌套查询语句。</p></li><li><p>子查询根据查询结果不同，作用不同</p><ul><li>子查询语句结果是单行单列，子查询语句作为条件值，使用 =  !=  &gt;  &lt;  等进行条件判断</li><li>子查询语句结果是多行单列，子查询语句作为条件值，使用 in 等关键字进行条件判断</li><li>子查询语句结果是多行多列，子查询语句作为虚拟表</li></ul></li><li><p>案例</p><ul><li><p>查询 ‘财务部’ 和 ‘市场部’ 所有的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 &#x27;财务部&#x27; 或者 &#x27;市场部&#x27; 所有的员工的部门did</span></span><br><span class="line"><span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> did <span class="keyword">from</span> dept <span class="keyword">where</span> dname <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> dname <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询入职日期是 ‘2011-11-11’ 之后的员工信息和部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询入职日期是 &#x27;2011-11-11&#x27; 之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ;</span><br><span class="line"><span class="comment">-- 将上面语句的结果作为虚拟表和dept表进行内连接查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span> ) t1, dept <span class="keyword">where</span> t1.dep_id <span class="operator">=</span> dept.did;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-4-案例">3.4  案例</h3><ul><li>环境准备：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dept;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> job;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> salarygrade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  did <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 部门id</span></span><br><span class="line">  dname <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 部门名称</span></span><br><span class="line">  loc <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="comment">-- 部门所在地</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职务表，职务名称，职务描述</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  jname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">  description <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 员工id</span></span><br><span class="line">  ename <span class="type">VARCHAR</span>(<span class="number">50</span>), <span class="comment">-- 员工姓名</span></span><br><span class="line">  job_id <span class="type">INT</span>, <span class="comment">-- 职务id</span></span><br><span class="line">  mgr <span class="type">INT</span> , <span class="comment">-- 上级领导</span></span><br><span class="line">  joindate <span class="type">DATE</span>, <span class="comment">-- 入职日期</span></span><br><span class="line">  salary <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 工资</span></span><br><span class="line">  bonus <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>), <span class="comment">-- 奖金</span></span><br><span class="line">  dept_id <span class="type">INT</span>, <span class="comment">-- 所在部门编号</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_jobid_ref_job_id_fk <span class="keyword">FOREIGN</span> KEY (job_id) <span class="keyword">REFERENCES</span> job (id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> emp_deptid_ref_dept_id_fk <span class="keyword">FOREIGN</span> KEY (dept_id) <span class="keyword">REFERENCES</span> dept (id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 工资等级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salarygrade (</span><br><span class="line">  grade <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,   <span class="comment">-- 级别</span></span><br><span class="line">  losalary <span class="type">INT</span>,  <span class="comment">-- 最低工资</span></span><br><span class="line">  hisalary <span class="type">INT</span> <span class="comment">-- 最高工资</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加4个部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(did,dname,loc) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;教研部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="string">&#x27;学工部&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">(<span class="number">30</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),</span><br><span class="line">(<span class="number">40</span>,<span class="string">&#x27;财务部&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加4个职务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job (id, jname, description) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;董事长&#x27;</span>, <span class="string">&#x27;管理整个公司，接单&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;经理&#x27;</span>, <span class="string">&#x27;管理部门员工&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;销售员&#x27;</span>, <span class="string">&#x27;向客人推销产品&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;文员&#x27;</span>, <span class="string">&#x27;使用办公软件&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加员工</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;孙悟空&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2000-12-17&#x27;</span>,<span class="string">&#x27;8000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;卢俊义&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-20&#x27;</span>,<span class="string">&#x27;16000.00&#x27;</span>,<span class="string">&#x27;3000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">&#x27;林冲&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-02-22&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;5000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1004</span>,<span class="string">&#x27;唐僧&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-04-02&#x27;</span>,<span class="string">&#x27;29750.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1005</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-28&#x27;</span>,<span class="string">&#x27;12500.00&#x27;</span>,<span class="string">&#x27;14000.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1006</span>,<span class="string">&#x27;宋江&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-05-01&#x27;</span>,<span class="string">&#x27;28500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1007</span>,<span class="string">&#x27;刘备&#x27;</span>,<span class="number">2</span>,<span class="number">1009</span>,<span class="string">&#x27;2001-09-01&#x27;</span>,<span class="string">&#x27;24500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1008</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-04-19&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1009</span>,<span class="string">&#x27;罗贯中&#x27;</span>,<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2001-11-17&#x27;</span>,<span class="string">&#x27;50000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">1010</span>,<span class="string">&#x27;吴用&#x27;</span>,<span class="number">3</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-09-08&#x27;</span>,<span class="string">&#x27;15000.00&#x27;</span>,<span class="string">&#x27;0.00&#x27;</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1011</span>,<span class="string">&#x27;沙僧&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2007-05-23&#x27;</span>,<span class="string">&#x27;11000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1012</span>,<span class="string">&#x27;李逵&#x27;</span>,<span class="number">4</span>,<span class="number">1006</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;9500.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">1013</span>,<span class="string">&#x27;小白龙&#x27;</span>,<span class="number">4</span>,<span class="number">1004</span>,<span class="string">&#x27;2001-12-03&#x27;</span>,<span class="string">&#x27;30000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">1014</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="number">4</span>,<span class="number">1007</span>,<span class="string">&#x27;2002-01-23&#x27;</span>,<span class="string">&#x27;13000.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加5个工资等级</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salarygrade(grade,losalary,hisalary) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="number">7000</span>,<span class="number">12000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">12010</span>,<span class="number">14000</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">14010</span>,<span class="number">20000</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">20010</span>,<span class="number">30000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">30010</span>,<span class="number">99990</span>);</span><br></pre></td></tr></table></figure><ul><li><p>需求</p><ol><li><p>查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 方式一 ：隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.id,</span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">job.jname,</span><br><span class="line">job.description</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">job</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.job_id <span class="operator">=</span> job.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二 ：显式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.id,</span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">job.jname,</span><br><span class="line">job.description</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id;</span><br></pre></td></tr></table></figure></li><li><p>查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 部门名称，部门位置 来自于 部门表 dept</span></span><br><span class="line"><span class="comment">5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式一 ：隐式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.id,</span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">job.jname,</span><br><span class="line">job.description,</span><br><span class="line">dept.dname,</span><br><span class="line">dept.loc</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">job,</span><br><span class="line">dept</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.job_id <span class="operator">=</span> job.id</span><br><span class="line"><span class="keyword">and</span> dept.id <span class="operator">=</span> emp.dept_id</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二 ：显式内连接</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.id,</span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">job.jname,</span><br><span class="line">job.description,</span><br><span class="line">dept.dname,</span><br><span class="line">dept.loc</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> dept.id <span class="operator">=</span> emp.dept_id</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1. 员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">2. 工资等级 信息在 salarygrade 工资等级表中</span></span><br><span class="line"><span class="comment">3. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">t2.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">salarygrade t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.salary <span class="operator">&gt;=</span> t2.losalary</span><br><span class="line"><span class="keyword">AND</span> emp.salary <span class="operator">&lt;=</span> t2.hisalary</span><br></pre></td></tr></table></figure></li><li><p>查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1. 员工编号，员工姓名，工资 信息在emp 员工表中</span></span><br><span class="line"><span class="comment">2. 职务名称，职务描述 信息在 job 职务表中</span></span><br><span class="line"><span class="comment">3. job 职务表 和 emp 员工表 是 一对多的关系 emp.job_id = job.id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 部门名称，部门位置 来自于 部门表 dept</span></span><br><span class="line"><span class="comment">5. dept 和 emp 一对多关系 dept.id = emp.dept_id</span></span><br><span class="line"><span class="comment">6. 工资等级 信息在 salarygrade 工资等级表中</span></span><br><span class="line"><span class="comment">7. emp.salary &gt;= salarygrade.losalary  and emp.salary &lt;= salarygrade.hisalary</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp.id,</span><br><span class="line">emp.ename,</span><br><span class="line">emp.salary,</span><br><span class="line">job.jname,</span><br><span class="line">job.description,</span><br><span class="line">dept.dname,</span><br><span class="line">dept.loc,</span><br><span class="line">t2.grade</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job <span class="keyword">ON</span> emp.job_id <span class="operator">=</span> job.id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> dept.id <span class="operator">=</span> emp.dept_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salarygrade t2 <span class="keyword">ON</span> emp.salary <span class="keyword">BETWEEN</span> t2.losalary <span class="keyword">and</span> t2.hisalary;</span><br></pre></td></tr></table></figure></li><li><p>查询出部门编号、部门名称、部门位置、部门人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1. 部门编号、部门名称、部门位置 来自于部门 dept 表</span></span><br><span class="line"><span class="comment">2. 部门人数: 在emp表中 按照dept_id 进行分组，然后count(*)统计数量</span></span><br><span class="line"><span class="comment">3. 使用子查询，让部门表和分组后的表进行内连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 根据部门id分组查询每一个部门id和员工数</span></span><br><span class="line"><span class="keyword">select</span> dept_id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dept.id,</span><br><span class="line">dept.dname,</span><br><span class="line">dept.loc,</span><br><span class="line">t1.count</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">dept,</span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">dept_id,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) count</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">dept_id</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">dept.id <span class="operator">=</span> t1.dept_id</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="4，事务">4，事务</h2><h3 id="4-1-概述">4.1  概述</h3><blockquote><p>数据库的事务（Transaction）是一种机制、一个操作序列，包含了==一组数据库操作命令==。</p><p>事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令==要么同时成功，要么同时失败==。</p><p>事务是一个不可分割的工作逻辑单元。</p></blockquote><p>这些概念不好理解，接下来举例说明，如下图有一张表</p><img src="https://img.777nx.cn/test/image-20210724224955876.png" alt="image-20210724224955876" style="zoom:80%;" /><p>张三和李四账户中各有100块钱，现李四需要转换500块钱给张三，具体的转账操作为</p><ul><li>第一步：查询李四账户余额</li><li>第二步：从李四账户金额 -500</li><li>第三步：给张三账户金额 +500</li></ul><p>现在假设在转账过程中第二步完成后出现了异常第三步没有执行，就会造成李四账户金额少了500，而张三金额并没有多500；这样的系统是有问题的。如果解决呢？使用事务可以解决上述问题</p><img src="https://img.777nx.cn/test/image-20210724225537533.png" alt="image-20210724225537533" style="zoom:70%;" /><p>从上图可以看到在转账前开启事务，如果出现了异常回滚事务，三步正常执行就提交事务，这样就可以完美解决问题。</p><h3 id="4-2-语法">4.2  语法</h3><ul><li><p>开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">或者  </span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-代码验证">4.3  代码验证</h3><ul><li><p>环境准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>不加事务演示问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>整体执行结果肯定会出问题，我们查询账户表中数据，发现李四账户少了500。</p><img src="https://img.777nx.cn/test/image-20210724230250263.png" alt="image-20210724230250263" style="zoom:90%;" /></li><li><p>添加事务sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="comment">-- 1. 查询李四账户金额是否大于500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 李四账户 -500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line">出现异常了...  <span class="comment">-- 此处不是注释，在整体执行时会出问题，后面的sql则不执行</span></span><br><span class="line"><span class="comment">-- 3. 张三账户 +500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p>上面sql中的执行成功进选择执行提交事务，而出现问题则执行回滚事务的语句。以后我们肯定不可能这样操作，而是在java中进行操作，在java中可以抓取异常，没出现异常提交事务，出现异常回滚事务。</p></li></ul><h3 id="4-4-事务的四大特征">4.4  事务的四大特征</h3><ul><li><p>原子性（Atomicity）: 事务是不可分割的最小操作单位，要么同时成功，要么同时失败</p></li><li><p>一致性（Consistency） :事务完成时，必须使所有的数据都保持一致状态</p></li><li><p>隔离性（Isolation） :多个事务之间，操作的可见性</p></li><li><p>持久性（Durability） :事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ul><blockquote><p>==说明：==</p><p>mysql中事务是自动提交的。</p><p>也就是说我们不添加事务执行sql语句，语句执行完毕会自动的提交事务。</p><p>可以通过下面语句查询默认提交方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @<span class="meta">@autocommit</span>;</span><br></pre></td></tr></table></figure><p>查询到的结果是1 则表示自动提交，结果是0表示手动提交。当然也可以通过下面语句修改提交方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <summary type="html">mysql高级</summary>
    
    
    
    <category term="Java" scheme="https://www.777nx.cn/categories/Java/"/>
    
    
    <category term="mysql" scheme="https://www.777nx.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>博客添加待办清单页</title>
    <link href="https://www.777nx.cn/posts/9875347c.html"/>
    <id>https://www.777nx.cn/posts/9875347c.html</id>
    <published>2023-03-20T09:51:50.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>参考：<a href="https://www.chuckle.top/article/9875347c.html">博客添加待办清单页</a></p></div><h2 id="1-前言">1. 前言</h2><p>要做的事还有很多，想做的事源源不断，那就都记录在博客里吧，<a href="https://www.777nx.cn/personal/todolist/">ToDoList</a>。</p><h2 id="2-实现">2. 实现</h2><ol><li>新建 <code>[blogroot]\themes\butterfly\layout\includes\page\todolist.pug</code> 添加以下代码</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#todolist-box</span></span><br><span class="line">    <span class="selector-class">.page-top-card</span>(style=<span class="string">&#x27;background-image: url(/img/todo.webp);&#x27;</span>)</span><br><span class="line">        <span class="selector-class">.content-item-tips</span> 想做清单</span><br><span class="line">        <span class="selector-tag">span</span><span class="selector-class">.content-item-title</span> ToDoList</span><br><span class="line">        <span class="selector-class">.content-bottom</span></span><br><span class="line">            <span class="selector-class">.tips</span> 要做的事还有很多，想做的事源源不断</span><br><span class="line">    <span class="selector-id">#todolist-main</span></span><br><span class="line">        <span class="selector-id">#todolist-left</span></span><br><span class="line">            each <span class="selector-tag">i</span> <span class="keyword">in</span> site<span class="selector-class">.data</span><span class="selector-class">.todolist</span></span><br><span class="line">                <span class="keyword">if</span> <span class="selector-tag">i</span><span class="selector-class">.seat</span> == <span class="string">&#x27;left&#x27;</span></span><br><span class="line">                    <span class="selector-class">.todolist-item</span></span><br><span class="line">                        <span class="selector-tag">h3</span>.todolist-title=<span class="selector-tag">i</span><span class="selector-class">.class_name</span></span><br><span class="line">                        <span class="selector-tag">ul</span><span class="selector-class">.todolist-ul</span></span><br><span class="line">                            each item <span class="keyword">in</span> <span class="selector-tag">i</span><span class="selector-class">.todo_list</span></span><br><span class="line">                                <span class="selector-tag">li</span><span class="selector-class">.todolist-li</span></span><br><span class="line">                                    <span class="keyword">if</span> item<span class="selector-class">.completed</span></span><br><span class="line">                                        <span class="selector-tag">i</span><span class="selector-class">.fa-regular</span><span class="selector-class">.fa-circle-check</span></span><br><span class="line">                                    <span class="keyword">else</span> </span><br><span class="line">                                        <span class="selector-tag">i</span><span class="selector-class">.fa-regular</span><span class="selector-class">.fa-circle</span></span><br><span class="line">                                    span=item<span class="selector-class">.content</span></span><br><span class="line">        <span class="selector-id">#todolist-right</span></span><br><span class="line">            each <span class="selector-tag">i</span> <span class="keyword">in</span> site<span class="selector-class">.data</span><span class="selector-class">.todolist</span></span><br><span class="line">                <span class="keyword">if</span> <span class="selector-tag">i</span><span class="selector-class">.seat</span> == <span class="string">&#x27;right&#x27;</span></span><br><span class="line">                    <span class="selector-class">.todolist-item</span></span><br><span class="line">                        <span class="selector-tag">h3</span>.todolist-title=<span class="selector-tag">i</span><span class="selector-class">.class_name</span></span><br><span class="line">                        <span class="selector-tag">ul</span><span class="selector-class">.todolist-ul</span></span><br><span class="line">                            each item <span class="keyword">in</span> <span class="selector-tag">i</span><span class="selector-class">.todo_list</span></span><br><span class="line">                                <span class="selector-tag">li</span><span class="selector-class">.todolist-li</span></span><br><span class="line">                                    <span class="keyword">if</span> item<span class="selector-class">.completed</span></span><br><span class="line">                                        <span class="selector-tag">i</span><span class="selector-class">.fa-regular</span><span class="selector-class">.fa-circle-check</span></span><br><span class="line">                                    <span class="keyword">else</span> </span><br><span class="line">                                        <span class="selector-tag">i</span><span class="selector-class">.fa-regular</span><span class="selector-class">.fa-circle</span></span><br><span class="line">                                    span=item.<span class="attribute">content</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>[blogroot]\themes\butterfly\layout\page.pug</code></li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> page.type</span><br><span class="line">    when <span class="string">&#x27;tags&#x27;</span></span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span>tags.pug</span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span><span class="keyword">default</span>-page.pug</span><br><span class="line">    when <span class="string">&#x27;link&#x27;</span></span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span>flink.pug</span><br><span class="line">    when <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span>categories.pug</span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span><span class="keyword">default</span>-page.pug</span><br><span class="line">    when <span class="string">&#x27;essay&#x27;</span></span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span>essay.pug</span><br><span class="line">+    when <span class="string">&#x27;todolist&#x27;</span></span><br><span class="line">+        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span>todolist.pug</span><br><span class="line">    <span class="keyword">default</span></span><br><span class="line">        <span class="keyword">include</span> <span class="keyword">includes</span><span class="regexp">/page/</span><span class="keyword">default</span>-page.pug</span><br></pre></td></tr></table></figure><ol start="3"><li>新建 <code>[blogroot]\source\_data\todolist.yml</code> 添加以下代码</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">想做的项目</span></span><br><span class="line">  <span class="attr">seat:</span> <span class="string">left</span></span><br><span class="line">  <span class="attr">todo_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">个人主页</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">公众号</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">想看的书</span></span><br><span class="line">  <span class="attr">seat:</span> <span class="string">left</span></span><br><span class="line">  <span class="attr">todo_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">《毛泽东选集》</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">《86不存在的战区》</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">想买的东西</span></span><br><span class="line">  <span class="attr">seat:</span> <span class="string">left</span></span><br><span class="line">  <span class="attr">todo_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">小米平板5pro</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">致态固态硬盘</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">想学的技术</span></span><br><span class="line">  <span class="attr">seat:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">todo_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">Vue2/Vue3</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">Electron</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">想去的地方</span></span><br><span class="line">  <span class="attr">seat:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">todo_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">桂林</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">杭州</span></span><br><span class="line">      <span class="attr">completed:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加CSS样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#todolist-box</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todolist-main</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todolist-main</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>:none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todolist-main</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todolist-left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todolist-right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todolist-item</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fae4df</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">1rem</span> <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#f7a796</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span></span><br><span class="line"><span class="selector-class">.todolist-item</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#242424</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#51908b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.todolist-li</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.todolist-title</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="built_in">var</span>(--todo-border);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.todolist-li</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="built_in">var</span>(--todo-border);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todolist-li</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">700px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#todolist-left</span>,<span class="selector-id">#todolist-right</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.page-top-card</span>&#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20.5rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">2.7rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-top-card</span> <span class="selector-tag">span</span><span class="selector-class">.content-item-title</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.3em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: STZhongsong,<span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-top-card</span> <span class="selector-class">.content-bottom</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">5.4rem</span>);</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.page-top-card</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">92</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>新建页面，通过<code>hexo n page todolist</code>创建页面，相信都很熟悉了</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: ToDoList</span><br><span class="line">date: 2023-03-18 14:07:13</span><br><span class="line">comments: false</span><br><span class="line">aside: false</span><br><span class="line"><span class="section">type: todolist</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="3-后记">3. 后记</h2><p>后来我有这么多想要做的事情。</p>]]></content>
    
    
    <summary type="html">博客添加待办清单页</summary>
    
    
    
    <category term="博客" scheme="https://www.777nx.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="butterfly" scheme="https://www.777nx.cn/tags/butterfly/"/>
    
    <category term="hexo" scheme="https://www.777nx.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>免费的图床</title>
    <link href="https://www.777nx.cn/posts/d7fb1ba1.html"/>
    <id>https://www.777nx.cn/posts/d7fb1ba1.html</id>
    <published>2023-03-13T19:54:05.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="note info modern"><ol><li>这部分免费图床就太多了，我会把我目前发现的可以免费白嫖一定额度的图床做一个总结列在下面</li><li>这部分图床的搭建门槛较低，所以速度和稳定性良莠不齐，大家自行选择使用哪个</li><li>我这里只给大家演示一种的使用方法，其他图床使用方法也类似</li><li>大家可以看看哪个比较好用的或者自己知道的好用的这里没有，可以留言我会进行补充</li></ol></div><h2 id="1-免费图床推荐">1. 免费图床推荐</h2><table><thead><tr><th style="text-align:center">🍕</th><th style="text-align:center">🥗</th><th style="text-align:center">🍤</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://smms.app/">SMMS</a></td><td style="text-align:center"><a href="https://www.superbed.cn/">聚合图床</a></td><td style="text-align:center"><a href="https://www.hualigs.cn/">遇见图床</a></td></tr><tr><td style="text-align:center"><a href="https://postimages.org/">PostImage</a></td><td style="text-align:center"><a href="https://imgse.com/">路过图床</a></td><td style="text-align:center"><a href="https://www.imgurl.org/">imgURL</a></td></tr><tr><td style="text-align:center"><a href="https://imgbox.com/">imgbox</a></td><td style="text-align:center"><a href="https://pic.iqy.ink/upload">Lsky Pro</a></td><td style="text-align:center"><a href="https://upload.cc/">Upload.cc</a></td></tr><tr><td style="text-align:center"><a href="https://imagelol.com/">imagelol</a></td><td style="text-align:center"><a href="https://imgtp.com/">imgtp</a></td><td style="text-align:center"><a href="https://cloudimge.com/">云图床</a></td></tr><tr><td style="text-align:center"><a href="https://mcecy.com/">载涂图床</a></td><td style="text-align:center"><a href="https://tuchuang.voooe.cn/">Sky Chart Bed</a></td><td style="text-align:center"><a href="https://www.imgbed.link/">风筝图床</a></td></tr><tr><td style="text-align:center"><a href="https://pz.al/">喷子图床</a></td><td style="text-align:center"><a href="https://imgkb.com/">imgkb</a></td><td style="text-align:center"></td></tr></tbody></table><ul><li>使用方法：直接进入官网，上传图片然后粘贴地址即可，地址的样式有多样，自行选择。</li><li>选择要点：<ol><li>速度：大家可以到<a href="https://ping.cn/">Ping.cn</a>进行测试</li><li>稳定性与安全性：看看图床创建时间，网上评价等</li><li>可适用性：支持的格式越多肯定是越好的，有部分支持<code>webp</code>和其他格式的，可以当资源床</li></ol></li></ul><h2 id="2-PicGo结合Markdown实时上传图片">2. PicGo结合Markdown实时上传图片</h2><ul><li><p>Picgo究竟是什么？这是一个开源软件，开源地址：<a href="https://github.com/Molunerfinn/PicGo">Molunerfinn/PicGo</a></p></li><li><p>引用项目的介绍：这是一个用于快速上传图片并获取图片 URL 链接的工具，关键是他可以与Typora配套一起使用，在粘贴图片的同时上传图片，十分方便！</p></li><li><p>最新版我这里实测没办法安装一些插件，因此推荐大家安装<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1-beta.5">v2.3.1-beta.5</a>这个版本</p><p><img src="https://img.777nx.cn/test/image-20230313200455541.png" alt="image-20230313200455541"></p></li><li><p>下载软件后直接一路安装下去就行，建议装在非C盘的任意一个盘。</p></li></ul>]]></content>
    
    
    <summary type="html">更好的保存你的图片</summary>
    
    
    
    <category term="博客" scheme="https://www.777nx.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="图床" scheme="https://www.777nx.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>npm常用指令</title>
    <link href="https://www.777nx.cn/posts/4e4cffb7.html"/>
    <id>https://www.777nx.cn/posts/4e4cffb7.html</id>
    <published>2023-03-13T17:13:52.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装模块">1. 安装模块</h2><table><thead><tr><th style="text-align:center"><strong>命令</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center">npm init</td><td style="text-align:center">初始化 package.json，它是 NodeJS 约定的用来存放项目的信息和配置等信息的文件</td></tr><tr><td style="text-align:center">npm i</td><td style="text-align:center">安装所有依赖，从github上拉取项目后，常执行此命令用于初始化</td></tr><tr><td style="text-align:center">npm i 包名</td><td style="text-align:center">安装模块到默认dependencies</td></tr><tr><td style="text-align:center">npm i 包名 -g</td><td style="text-align:center">会安装到配置的全局目录下</td></tr><tr><td style="text-align:center">npm i 包名 -S</td><td style="text-align:center">安装包信息将加入到dependencies生产依赖</td></tr><tr><td style="text-align:center">npm i 包名 -D</td><td style="text-align:center">安装包信息将加入到devDependencies开发依赖</td></tr><tr><td style="text-align:center">npm i 包名@1.8.3</td><td style="text-align:center">安装模块指定为1.8.3版本</td></tr></tbody></table><h3 id="缩写解释">缩写解释</h3><ul><li>-g： 为 --global 的缩写，表示安装到全局目录里</li><li>-S： 为 --save 的缩写，表示安装的包将写入package.json里面的dependencies</li><li>-D： 为 --save-dev 的缩写，表示将安装的包将写入packege.json里面的devDependencies</li><li>i： 为install的缩写，表示安装</li></ul><h3 id="常见问题">常见问题</h3><ul><li>全局安装与本地安装的区别：本地安装是指安装到项目中指定的node-moudel中，全局安装是到node安装目录下的node-mouduels中，全局安装你可以用cmd命令行去操作，本地则通过require语法获取安装引入安装模块</li><li>生产依赖和开发依赖的区别：生产依赖里面的包只用于开发环境，不用于生产环境，这些包通常是单元测试或者打包工具等，例如webpack等。开发依赖，或者叫做业务依赖，这是我们最常用的依赖包管理对象，它用于指定应用依赖的外部包，这些依赖是应用发布后正常执行时所需要的，但不包含测试时或者本地打包时所使用的包</li></ul><h2 id="2-卸载模块">2. 卸载模块</h2><ul><li>npm uninstall 包名</li><li>un为uninstall的缩写</li></ul><h2 id="3-更新模块">3. 更新模块</h2><table><thead><tr><th style="text-align:center"><strong>命令</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center">npm update 包名</td><td style="text-align:center">更新最新版本的模块</td></tr><tr><td style="text-align:center">npm update 包名@2.1.0</td><td style="text-align:center">更新到指定版本号的模块</td></tr><tr><td style="text-align:center">npm install 包名@latest</td><td style="text-align:center">更新到最新版本</td></tr></tbody></table><h2 id="4-查看命令">4. 查看命令</h2><table><thead><tr><th style="text-align:center"><strong>命令</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center">npm list / npm ls</td><td style="text-align:center">查看本地已安装包的清单列表</td></tr><tr><td style="text-align:center">npm view 包名 dependencies</td><td style="text-align:center">查看某个包对于各种包的依赖关系</td></tr><tr><td style="text-align:center">npm view 包名 version</td><td style="text-align:center">查看包的最新的版本号</td></tr><tr><td style="text-align:center">npm view 包名 versions</td><td style="text-align:center">查看包的历史版本号</td></tr><tr><td style="text-align:center">npm view 包名</td><td style="text-align:center">查看最新的jquery版本的信息</td></tr></tbody></table><h2 id="5-设置镜像">5. 设置镜像</h2><ul><li><p>全局淘宝镜像：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>默认全局镜像：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-其他命令">6. 其他命令</h2><table><thead><tr><th style="text-align:center"><strong>命令</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center">npm cache clean</td><td style="text-align:center">清除npm的缓存</td></tr><tr><td style="text-align:center">npm prune</td><td style="text-align:center">清除项目中没有被使用的包</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">npm常用指令</summary>
    
    
    
    <category term="前端" scheme="https://www.777nx.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="npm" scheme="https://www.777nx.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Axure的安装教程</title>
    <link href="https://www.777nx.cn/posts/8f3f2e3b.html"/>
    <id>https://www.777nx.cn/posts/8f3f2e3b.html</id>
    <published>2023-03-13T01:05:18.000Z</published>
    <updated>2023-05-15T13:41:28.989Z</updated>
    
    <content type="html"><![CDATA[<div class="tip cogs"><p>本站资源均来源于网络，只作学习交流使用，版权归原作者所有，请于下载后24小时内删除，若作商业用途，请联系原作者授权，由于未授权发生的侵权行为与本站无关，若本站侵犯了您的权益，请联系本站删除，邮箱：fantasy@777nx.cn</p></div><h2 id="Axure简单介绍">Axure简单介绍</h2><p>Axure即为原型（prototype），这个词来自拉丁文的词proto，意谓“最初的”，意义是形式或模型。那么Axure有什么用呢？</p><p>Axure RP是一款专业的快速原型设计工具。通俗易解地讲就是帮助使用者可以快速的构造出我们需要的网页示意图、流程图、演示的网页文件等，可以在我们做项目前为我们大概地演示大体的框架页面，方便我们后面有序的设计出项目。</p><p>Axure这个软件功能强大，可以做出很多交互功能，得到我们需要的交互效果，可以直接通过拖拽画出原型、生成网页； Axure这个软件效果高，可以用快捷方便的方式，很快模拟出高保真页面原型。</p><h2 id="Axure的安装与汉化">Axure的安装与汉化</h2><h3 id="安装">安装</h3><p>Axure安装可以在以下网址下载，或者自行百度下载。</p><ol><li><p><a href="https://www.123pan.com/s/jLeA-gWyoA.html">https://www.123pan.com/s/jLeA-gWyoA.html</a></p></li><li><p><a href="https://www.axure.com.cn/">Axure中文学习网 – 交互原型设计软件Axure RP 10中文正版支持 – 北京口耳相传科技有限公司</a></p></li></ol><p>选择适合自己的版本，目前已经更新到了第十版本，推荐使用本人正在使用的第九版本，因为比较稳定。直接跟着next走安装完成即可。</p><h3 id="汉化">汉化</h3><p>汉化包可以在以下网址下载，，或者自行百度下载。</p><p><a href="https://www.123pan.com/s/jLeA-FWyoA.html">https://www.123pan.com/s/jLeA-FWyoA.html</a></p><p>下载好之后呢会得到如下图所示的汉化包：</p><p><img src="https://img.777nx.cn/test/image-20230313012512724.png" alt="image-20230313012512724"></p><p>之后只需要把lang整个文件夹复制到你下载好的Axure的文件夹里面就可以了。这时候打开你的Axure就可以得到中文版的Axure了。</p><p><img src="https://img.777nx.cn/test/image-20230313120859916.png" alt="image-20230313120859916"></p><h3 id="软件授权">软件授权</h3><ol><li><p>打开软件会弹出这个页面，直接点 输入授权</p><p><img src="https://img.777nx.cn/test/image-20230313120944133.png" alt="image-20230313120944133"></p></li><li><p>在授权处，填写 被授权人 和 授权密钥，然后提交即可</p><p><img src="https://img.777nx.cn/test/image-20230313112007466.png" alt="image-20230313112007466"></p></li></ol><div class="note success flat"><p>用户名：<a href="http://foxirj.com">foxirj.com</a><br>激活码：2pVLOhW90mI2zr9IRj8dwvdxDedEgk0EEFwaayqBj5XnYgJ9ewTCsW4QdvuadDLv</p></div><ol start="3"><li><p>如图显示为授权成功的样子</p><p><img src="https://img.777nx.cn/test/image-20230313112034578.png" alt="image-20230313112034578"></p></li></ol><h2 id="总结">总结</h2><p>Axure是前端中一个非常简单的设计软件，可以帮助我们快速的设计出我们需要的网页页面的大概模型，这样我们在做项目时有个模板参照，写起来逻辑性强，就会达到事半功倍的效果了。</p><p>Axure是前端学子的必须掌握的软件之一，而且入手门槛低。</p>]]></content>
    
    
    <summary type="html">Axure的安装教程</summary>
    
    
    
    <category term="计算机基础" scheme="https://www.777nx.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Axure" scheme="https://www.777nx.cn/tags/Axure/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂什么是数学建模</title>
    <link href="https://www.777nx.cn/posts/a69ae078.html"/>
    <id>https://www.777nx.cn/posts/a69ae078.html</id>
    <published>2023-03-12T21:34:27.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>首先声明一下，本文以下介绍都是本人自己的见解、自己的经验；都是<strong>用大白话去说</strong>，不会引入一些什么规范性的概念。</p></div><div class="note info flat"><p>参考：<a href="https://zhuanlan.zhihu.com/p/570492431">数学建模入门篇(0 基础必看，全是自己的经验)</a></p></div><h2 id="一、数学建模是什么？">一、数学建模是什么？</h2><p>说的神一点：就是让我们用数学的眼光去认识这个世界(纯纯扯犊子)。</p><p>其实说白了：就是生活中的各种问题(如股票预测、火灾报警统计等)，运用数学的方式去阐述并解决它。(其实大家也并不需要非得给数学建模一个定义，就简单理解为用数学的方法去做题就完了)</p><h2 id="二、为什么要参加数学建模？">二、为什么要参加数学建模？</h2><p>可能对于一些高情操的大神来说，是为了推动祖国的发展，社会的进步。</p><p>但对于我这种这凡夫俗子来说，<strong>加分啊！加分啊！加分啊！保个研究生，去和朋友吹牛 B 啊!</strong></p><p>对于想要保研的同学来说，数学建模比赛是必须要参加的，真的会加很多分，比做研发或申请专利等有效的多，所以我建议大家一定要看重这个比赛。具体加多少分，每个学校有不同的指标。</p><h2 id="三、数学建模赛事">三、数学建模赛事</h2><p>数学建模有很多赛事，以下介绍两个我们会参加的比赛。</p><h3 id="1、“数维杯”大学生数学建模挑战赛">1、“数维杯”大学生数学建模挑战赛</h3><p>主办方：内蒙古创新教育学会、内蒙古基础教育研究院</p><p>报名时间：截止日期为 2023 年 5 月 12 日 19 时</p><p>竞赛开始时间：2023 年 5 月 12 日 08 时至 5 月 15 日 09 时</p><h3 id="2、“高教社杯”全国大学生数学建模竞赛">2、“高教社杯”全国大学生数学建模竞赛</h3><p>主办方：中国工业与应用数学学会</p><p>报名时间：截止日期为 2022 年 9 月 2 日 20 时</p><p>竞赛时间：2022 年 9 月 15 日 18 时至 9 月 18 日 20 时</p><p>更多相关信息去比赛官网查询。</p><h2 id="四、如何准备数学建模比赛">四、如何准备数学建模比赛</h2><p>如何学数学建模，成为大家主要关心的事情。我当时学习的时候也翻阅了几篇其他前辈的推荐，也按照他们的思路去学了学，比如说：给你列了很多书单，让你去看，但是相信我，你根本看不下去几页，能看三四十页的我都佩服你。</p><p>下面说一下我认为的学习方式：</p><h3 id="1、去-b-站看视频">1、去 b 站看视频</h3><p>首先得整清楚各种模型是干什么的，它们的特点是什么，什么场景下用最合适。（比如说题目是一个分析评价题：是适合用 TOPSIS、还是主成分分析呢、还是用聚类分析呢。），最起码得知道这些模型是干什么的，**这样看到题目时才会“噢，这个题适合用神经网络机器学习预测；噢，那个题适合用主成分分析”，然后再去专门找以下所选模型的资料，**减少了巨多工作量。推荐“清风数学建模”、“老哥教你学建模”。</p><h3 id="2、跟着视频中的例题练手">2、跟着视频中的例题练手</h3><p>这些视频讲解的时候都会有一些例题和课后作业，然后去演示怎么做(如 Matlab、spss、stata)，不要只看，一定要跟着去做，做的过程中会发现很多问题。</p><h3 id="3、直接怼国赛优秀论文！！！！！！！！！！（相信我）">3、直接怼国赛优秀论文！！！！！！！！！！（相信我）</h3><p>**看完视频了解完各种模型，就直接怼论文，**刚开始的时候肯定很痛苦（啊，一篇文章二三十页，这这怎么可能有耐心看下去；啊，这写的什么啊，完全看不懂）。</p><p>我记得我当时看论文的时候，就觉得“这他喵的，是人写的吗”，看着看着没耐心了，看着看着走神了，然后拍拍头继续硬着头皮看。但是等你看个三四篇的时候，就会发现其中的精髓，看别人怎么分析的问题，怎么选模型，及他们做的图怎么这么好看，文章这么有条理性。</p><p>然后就跟着学呗，学别人怎么分析问题、学别人怎么排版、学别人怎么作图好看，学会了不就都是自己的了吗。</p><h3 id="4、大量参加比赛！！！！！！！！！（练兵）">4、大量参加比赛！！！！！！！！！（练兵）</h3><p>不要想着我什么都不会参加比赛干啥，有那时间还不如多看两个视频、多读两篇文章呢。我告诉你，这样的想法是大错特错，</p><p>不会做不要紧，根据题目现学，最后哪怕是编也要把论文编出来，参加几次比赛就会有感觉，刚开始的时候要端正好心态，不要盲目的追求获奖，我们只是练兵，等把自己知识提升好了，一年的时间基本上就能把所有的奖项获得一遍。</p><h2 id="五、组队见解">五、组队见解</h2><p>俗话说“三个臭皮匠，顶个诸葛亮”，建模比赛也是三个人组队，一般来说为：一人负责编程、一人负责建模、一人负责论文。</p><p>对于大数据类的题，我的见解最好是两人负责编程，一人负责论文，这两位编程手中一人主要负责数据处理，另一位负责模型算法的编写。为什么这么说呢，发布题目后肯定是三个人一起讨论，发表自己对题目的理解，然后找最好的方法，这个过程中基本上已经把算法确定下来了，后续建模手的工作量基本不大了，但编程手的工作量巨大，还要处理数据，还要跑算法出结果，所以我建议准备做大数据类题目的队伍可以考虑以下这种组队形式。</p><p>对于大数据类题目，最优团队见解</p><h3 id="（1）主算法编程队员">（1）主算法编程队员</h3><p>这位队员要对算法了解更深一些，对各种模型有自己的认识和理解。</p><p>在讨论题目过程中，收集大家的理解，判断各种想法的可行性，确定完模型后查找资料编写该模型的程序。</p><h3 id="（2）主数据编程队员">（2）主数据编程队员</h3><p>对于大数据类题目，会有巨多的数据需要处理(我记的去年“高教社杯”数学建模竞赛，有十多万行数据)，而且还存在一些数据维度不同(如输入以“天”为节点，输出以“小时”为节点)等问题。可用 excel 编写伪代码做，或用 Matlab、python。</p><h3 id="（3）主论文队员">（3）主论文队员</h3><p>主论文队员必须有良好的写作能力，以及排版美化审美。做好数据可是化（做一些好看的图，数据用“三线表”格式存放）；多看优秀论文，总结别人写作的经验。</p><p>当然，这三个人必须对各种模型都有一定的了解，要不然分析不对问题，确定不下来正确的算法，编什么程序，所以说并不是只需要一个人会算法就行，是所有人都要了解算法，包括论文手也是，不了解算法，根本写不出什么东西，没有自己的见解光去网上找文章 ctrl+c、ctrl+v 肯定是不行，可能连论文的查重都过不了。</p><p>还有比较重要的一点，大家不要老想着“找个大牛抱大腿”，组队最好找能处的来的，确实想通过这方面提升自己的。不是多会没问题，大家可以一起学，一起慢慢提升。所以说找队友一定要谨慎，我见过太多还没结赛就分崩离析的队伍。</p><h2 id="附录：2022-年全国大学生数学建模竞赛题目">附录：2022 年全国大学生数学建模竞赛题目</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://777nx.lanzoue.com/i4Jui0qm5zwb">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ https://777nx.lanzoue.com/i4Jui0qm5zwb.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">2022年第七届数维杯大学生数学建模挑战赛赛题</div>            <div class="tag-link-sitename"> 请先阅读“2022 年数维杯大学生数学建模挑战赛论文格式规范”</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href=" https://777nx.lanzoue.com/ipd8n0pxphsj">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ https://777nx.lanzoue.com/ipd8n0pxphsj.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">2022年高教社杯全国大学生数学建模竞赛题目</div>            <div class="tag-link-sitename"> 请先阅读“全国大学生数学建模竞赛论文格式规范”</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
    
    
    <summary type="html">一文读懂什么是数学建模</summary>
    
    
    
    <category term="Python" scheme="https://www.777nx.cn/categories/Python/"/>
    
    
    <category term="数学建模" scheme="https://www.777nx.cn/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建基础教程(二)</title>
    <link href="https://www.777nx.cn/posts/4aa2d85f.html"/>
    <id>https://www.777nx.cn/posts/4aa2d85f.html</id>
    <published>2023-03-11T00:23:52.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note info no-icon flat"><p>前言📝<br>这部分教程有参考tzy大佬的文章：<a href="https://tzy1997.com/articles/hexo1603/">基于 Hexo 从零开始搭建个人博客（三）</a>、<a href="https://tzy1997.com/articles/hexo1604/">基于 Hexo 从零开始搭建个人博客（四）</a></p><p>阅读本篇前，请先阅读前面的文章：<a href="https://www.777nx.cn/posts/e593433d.html">Hexo 博客搭建基础教程 (一)</a></p></div><h2 id="1-前言">1. 前言</h2><ol><li><p>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</p></li><li><p>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到站长的回复。</p></li><li><p>实在解决不了的问题可添加站长的微信进行交流，备注自己的个人信息。</p></li></ol><h2 id="2-Vercel部署与自定义域名">2. Vercel部署与自定义域名</h2><h3 id="2-1-Vercel部署">2.1 Vercel部署</h3><p>Vercel简介：<a href="https://vercel.com/dashboard">vercel</a>是一个代码托管平台，它能够托管你的静态html界面，甚至能够托管你的node.js与Python服务端脚本，是<strong>不想买服务器的懒人的福音</strong>！</p><p><strong>使用Vercel部署Hexo项目步骤：</strong></p><ol><li><p>首先需要一个Vercel账号，这里<strong>推荐用GitHub账户关联，这样你就可以在vercel中直接托管你的GitHub库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）。</p><p><img src="https://img.777nx.cn/test/image-20230316145325197.png" alt="image-20230316145325197"></p></li><li><p>当你用你的Github账户关联并绑定手机号登录之后，点击右上角的<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示你要导入该仓库。</p><p><img src="https://img.777nx.cn/test/image-20230316145520042.png" alt="image-20230316145520042"></p><p><img src="https://img.777nx.cn/test/image-20230316145629190.png" alt="image-20230316145629190"></p></li><li><p>起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功，部署成功后点击<code>Continue to Dashboard</code>跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为GFW最近把Vercel屏蔽了。</p><p><img src="https://img.777nx.cn/test/image-20230316145830895.png" alt="image-20230316145830895"></p><p><img src="https://img.777nx.cn/test/image-20230316145953453.png" alt="image-20230316145953453"></p></li></ol><h3 id="2-2-绑定自定义域名">2.2 绑定自定义域名</h3><p>现在你的个人网站的地址是 <code>username.github.io</code>以及在Vercel上有一个<code>777nx-github-io.vercel.app</code>。如果觉得不够定制化，可以购买一个专属域名。</p><blockquote><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p></blockquote><p>腾讯云、阿里云等都是不错的域名代理商，建议选用<code>com</code>，<code>cn</code>或<code>cc</code>这类常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。此处以阿里云域名为例进行说明，购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加Vercel所需的解析记录，注意博主这里是解析二级域名只需要解析一条即可。但是如果是一级域名，需要解析两个，一个是<code>@</code>，另外一个是<code>www</code>，Vercel建议是<code>@</code>的解析重定向至<code>www</code>。</p><p>以我的域名：<code>777nx.cn</code>为例进行说明</p><table><thead><tr><th style="text-align:center"><strong>主机记录</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:center">www</td><td style="text-align:center">解析后的域名为 <a href="http://www.777nx.cn">www.777nx.cn</a></td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">直接解析主域名 <a href="http://777nx.cn">777nx.cn</a></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">泛解析，匹配其他所有域名 *.777nx.cn</td></tr><tr><td style="text-align:center">mail</td><td style="text-align:center">将域名解析为 <a href="http://mail.777nx.cn">mail.777nx.cn</a>，通常用于解析邮箱服务器</td></tr><tr><td style="text-align:center">二级</td><td style="text-align:center">如 <a href="http://abc.777nx.cn">abc.777nx.cn</a>，填写 abc</td></tr><tr><td style="text-align:center">手机网站</td><td style="text-align:center">如 <a href="http://m.777nx.cn">m.777nx.cn</a>，填写 m</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table><blockquote><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p></blockquote><table><thead><tr><th style="text-align:center"><strong>记录类型</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td style="text-align:center">CNAME</td><td style="text-align:center">如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td style="text-align:center">MX</td><td style="text-align:center">如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td style="text-align:center">TXT</td><td style="text-align:center">在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td style="text-align:center">NS</td><td style="text-align:center">域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td style="text-align:center">AAAA</td><td style="text-align:center">用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td style="text-align:center">SRV</td><td style="text-align:center">记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td style="text-align:center">显性URL</td><td style="text-align:center">从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td style="text-align:center">隐性URL</td><td style="text-align:center">类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table><p><strong>添加自定义域名的步骤：</strong></p><ol><li><p>点击Vercel控制面板右上角的<code>View Domains</code>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入刚刚购买的域名，我这里以二级域名<code>demo.777nx.cn</code>为例进行说明，添加后他会提示你添加一条DNS解析记录。</p><p><img src="https://img.777nx.cn/test/image-20230316151509927.png" alt="image-20230316151509927"></p><p><img src="https://img.777nx.cn/test/image-20230316151714732.png" alt="image-20230316151714732"></p><p><img src="https://img.777nx.cn/test/image-20230316153445442.png" alt="image-20230316153445442"></p></li></ol><p><strong>PS</strong>：如果你是新买的域名，直接输入你新买的一级域名即可，例如<code>demo123.com</code>，他会推荐你将<code>demo123.com</code>重定向至<code>www.demo123.com</code>，点<code>ADD</code>即可，然后他会提示你添加两条解析记录，一个是<code>@</code>开头的和<code>CNAME</code>开头的，添加记录的方法和二级域名一致。</p><p><img src="https://img.777nx.cn/test/66c6d6f8fac84481b788228c4222864d.jpg" alt="66c6d6f8fac84481b788228c4222864d"></p><p><img src="https://img.777nx.cn/test/d6dd5ec65e93439482a7ddd5833ebd9d.jpg" alt="d6dd5ec65e93439482a7ddd5833ebd9d"></p><ol start="2"><li><p>在阿里云域名解析记录里面添加如下记录，其中记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。</p><p><img src="https://img.777nx.cn/test/image-20230318143716719.png" alt="image-20230318143716719"></p></li><li><p>回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。</p><p><img src="https://img.777nx.cn/test/image-20230318143814742.png" alt="image-20230318143814742"></p><p><img src="https://img.777nx.cn/test/image-20230318144509465.png" alt="image-20230318144509465"></p></li><li><p>当你有了新的域名之后，需要<code>[BlogRoot]\_config.yml</code>文件中的<code>url</code>配置项为自己的新域名，这样博客的文章链接才会正确生成。</p><p><img src="https://img.777nx.cn/test/image-20230318144403975.png" alt="image-20230318144403975"></p></li></ol><h2 id="3-安装主题">3. 安装主题</h2><p>本教程用的 🦋 hexo-theme-butterfly 主题 v4.5.1最新版，请放心食用。</p><p>本教程用的是npm方式安装的 <code>hexo-theme-butterfly</code>，后续魔改时更改的文件都是【C:/Hexo-Blog/blog-demo/node_modules/hexo-theme-butterfly】文件夹中的文件。如果你是<code>git clone</code>克隆方式安装的主题，请在【C:/Hexo-Blog/blog-demo/themes/butterfly】文件夹下修改对应的文件。</p><div class="tabs" id="安装主题"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#安装主题-1">npm安装</button></li><li class="tab"><button type="button" data-href="#安装主题-2">GitHub安装(推荐)</button></li><li class="tab"><button type="button" data-href="#安装主题-3">Gitee安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="安装主题-1"><p>注意：此方法只支持 Hexo 5.0.0以上版本!</p><p>在你的博客根目录（我这里路径为【C:/Hexo-Blog/blog-demo】）打开Git BASH命令窗口执行npm i hexo-theme-butterfly</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在【C:/Hexo-Blog/blog-demo/node_modules】文件夹下找到hexo-theme-butterfly文件夹</p><div class="note info modern"><p>升级方法：在博客根目录下，运行 <code>npm update hexo-theme-butterfly</code>。<br>升级前请将<code>hexo-theme-butterfly</code>文件夹备份，npm更新会直接覆盖成新的包。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="安装主题-2"><p>在你的博客根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），打开<code>Git BASH</code>工具，执行命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>安装成功后可在【C:/Hexo-Blog/blog-demo/themes】文件夹下找到<code>butterfly</code>文件夹，可以将<code>landscape</code>文件夹删掉。</p><div class="note info modern"><p>升级方法：在主题目录下，运行git pull</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="安装主题-3"><p>在你的博客根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），打开<code>Git BASH</code>工具，执行命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 4.5.0 https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterfly </span><br></pre></td></tr></table></figure><div class="note info modern"><p>升级方法：在主题目录下，运行git pull</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-应用主题">4. 应用主题</h2><ol><li>修改站点配置文件<code>_config.yml</code>，把主题改为<code>butterfly</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果你没有<code>pug</code>以及<code>stylus</code>的渲染器，请下载安装，这两个渲染器是<code>Butterfly</code>生成基础页面所需的依赖包：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><ol start="3"><li>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做，高度魔改的一般都不会升级主题了，不然魔改的会被覆盖掉）<br>把主题文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录里（我这里路径为【C:/Hexo-Blog/blog-demo】），同时重新命名为 <code>_config.butterfly.yml</code>。以后只需要在 <code>_config.butterfly.yml</code>进行配置即可生效。Hexo会自动合併主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</li></ol>]]></content>
    
    
    <summary type="html">Hexo博客搭建基础教程(二)</summary>
    
    
    
    <category term="博客" scheme="https://www.777nx.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://www.777nx.cn/tags/Hexo/"/>
    
    <category term="butterfly" scheme="https://www.777nx.cn/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>将网站/博客打包成桌面APP</title>
    <link href="https://www.777nx.cn/posts/4bea1ff9.html"/>
    <id>https://www.777nx.cn/posts/4bea1ff9.html</id>
    <published>2023-03-10T11:46:23.000Z</published>
    <updated>2023-05-15T13:41:28.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-预览">1. 预览</h2><div class="hide-block"><button type="button" class="hide-button" style="">预览效果    </button><div class="hide-content"><p>桌面图标：</p><p><img src="https://img.777nx.cn/test/cc7bacfb1570a8f7936c3b838408c3e.jpg" alt="cc7bacfb1570a8f7936c3b838408c3e"></p></div></div><h2 id="2-应用创建">2. 应用创建</h2><p><a href="https://www.apicloud.com/">点击注册 / 登录</a>，点击右上角进入控制台，点击左上角创建应用</p><p><img src="https://img.777nx.cn/test/202212221321020.webp" alt="202212221321020"></p><p>选择 Web App, 然后点击创建应用</p><p><img src="https://img.777nx.cn/test/202212221322176.webp" alt="202212221322176"></p><p>然后对左侧五个模块进行个性化设置</p><p><img src="https://img.777nx.cn/test/202212221324789.webp" alt="202212221324789"></p><h2 id="3-详细说明">3. 详细说明</h2><p>这里对五个模块进行一下简单的说明吧！</p><h3 id="3-1-端设置">3.1 端设置</h3><p><code>图标</code>上传大小不超过 1M，长宽等比且范围在 50px 至 200px 之间的 png 格式图片；<code>横竖屏设置</code>选择竖屏应用；<code>状态栏</code>个人建议选择显示；<code>启动页</code>上传尺寸为 1080*1920 的图片。</p><h3 id="3-2-证书">3.2 证书</h3><p><code>Android证书</code>选择一键创建证书，iOS 不用管。</p><h3 id="3-3-代码">3.3 代码</h3><p>填入你的网站地址 即：你的博客地址。</p><h3 id="3-4-模块">3.4 模块</h3><p>在模块库中选择 <code>webBrowser</code>, 其他的随意个性化。</p><h3 id="3-5-云编译">3.5 云编译</h3><p><code>应用名称</code>: 己想；<code>应用类别</code>: 其他；<code>平台</code>: 我是 Android 所以选 Android (不要选择 GooglePlay 格式); <code>类型</code>：正式版；<code>调试模式</code>：禁用；<code>全局加密</code>：禁用；<code>渠道打包</code>：禁用；<code>SVN设置</code>: 禁用；版本更具自己的情况来就行了！</p><p>然后点击 <strong>云编译</strong> , 过一会就会生成你的专属 APP，扫码下载即可！👻</p>]]></content>
    
    
    <summary type="html">将网站/博客打包成桌面APP</summary>
    
    
    
    <category term="前端" scheme="https://www.777nx.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="网站" scheme="https://www.777nx.cn/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="APP" scheme="https://www.777nx.cn/tags/APP/"/>
    
  </entry>
  
</feed>
